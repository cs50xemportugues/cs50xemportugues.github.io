En este laboratorio, tu tarea va a ser escribir una aplicación web que lleve un registro de los cumpleaños de las personas. Tu aplicación web va a mostrar una tabla de cumpleaños con los nombres de las personas en una columna y su mes y día de nacimiento en otra columna. También tendrá un formulario donde los usuarios pueden agregar un nuevo cumpleaños a una base de datos escribiendo el nombre de una nueva persona, el mes y el día en que nacieron. Luego, usando esa información, la aplicación tendrá que almacenarla en la base de datos y actualizar la página web con la información ingresada, mostrando los nombres y cumpleaños de todas las personas que están en la base de datos. 

Para hacerlo, lo primero que se debe entender es la estructura de la base de datos que se brinda. Te daremos una base de datos que tiene una tabla llamada "birthdays". Esta tabla tiene un ID, el nombre de la persona y un número entero para el mes y el día del cumpleaños de esa persona.

Ahora veamos el código que te proporcionamos como parte de esta aplicación. Esta es una aplicación de Flask. En primer lugar, vamos a echar un vistazo a application.py. Lo que se nota es que dentro de application.py, nos damos acceso a esta base de datos usando la biblioteca CS50 para acceder a birthdays.db, que representa la base de datos, dentro de la variable llamada DB. 

A continuación, tenemos una sola ruta en esta aplicación web, solo la ruta predeterminada, la barra "/", que acepta dos métodos de solicitud, GET y POST. El método GET se utilizará cuando alguien solo visita nuestra página escribiendo su URL o haciendo clic en un enlace. Y POST se utilizará cuando el usuario envíe algunos datos del formulario, como el nuevo cumpleaños de una persona para agregarlo a la base de datos. 

Si el método de solicitud es POST, significa que el usuario ha enviado algo a través de un formulario. Entonces, lo que querrás hacer es agregar la entrada del usuario con su nombre y su cumpleaños a la base de datos. Luego, se lo redirecciona de regreso a la ruta predeterminada. Pero si el usuario solo está obteniendo la página web, y no está enviando un cumpleaños nuevo, entonces vamos a mostrar index.html. En última instancia, index.html también debe acceder a información sobre todos los cumpleaños de las personas en la base de datos. Por lo tanto, querrás agregar lógica aquí para consultar la base de datos para obtener acceso a todos esos cumpleaños y pasarlos a index.html. 

Ahora vayamos a index.html, que se encuentra en nuestra carpeta de plantillas. Verás que aquí tenemos una sección que dice "Agregar un cumpleaños" y debajo no hay nada todavía. Esta forma será creada por ti. Luego, tenemos una tabla para mostrar los cumpleaños, donde cada fila de esa tabla tendrá una celda para el nombre de la persona y una celda para su cumpleaños, mes y día. Pero notarás que el cuerpo de esta tabla está vacío por ahora. Tu tarea será recorrer todos los cumpleaños a los que tienes acceso desde la base de datos e imprimir una fila dentro de esta plantilla HTML para cada uno de esos cumpleaños, imprimiendo una fila que tenga el nombre de la persona y su cumpleaños. 

Así que recapitulemos lo que vas a hacer como parte de este laboratorio. Lo primero que debes hacer en application.py es consultar todos los cumpleaños y pasar esos datos a index.html. Esto se encuentra en la sección else de esa ruta para una solicitud estándar GET. Cuando alguien obtiene tu página, quieres consultar todos los cumpleaños de la base de datos y luego darle esa información a index.html para que tu plantilla HTML pueda aprovechar esos datos para renderizar todas esas filas de la tabla. 

El siguiente paso en index.html es renderizar esas filas de la tabla. Para cada uno de los cumpleaños que obtuviste de la consulta, vas a renderizar un elemento como una fila en esa tabla con una celda en esa tabla para el nombre y una celda en esa tabla para el cumpleaños. Recuerda que puedes crear una fila de tabla en HTML con la etiqueta TR. Y puedes crear una celda en esa fila usando TD, lo que significa "table data". 

Probablemente quieras usar algún tipo de loop aquí también para poder recorrer tu lista de todos esos cumpleaños, y para cada uno de esos cumpleaños, renderizar una fila que aparezca dentro de tu tabla HTML. 

Después de implementar esa parte de la aplicación, deberías poder ver los cumpleaños que ya están en la base de datos. Pero ahora queremos la posibilidad de agregar nuevos cumpleaños a esa base de datos también. Entonces en index.html, agregarás un formulario para permitir a los usuarios agregar un nuevo cumpleaños. Ese formulario deberá permitir a los usuarios especificar el nombre de una persona, el mes en que nacieron y el día en que nacieron, y luego hacer clic en algún botón que les permita enviar ese formulario para agregar un nuevo cumpleaños a la base de datos. 

Finalmente, en application.py tendrás que agregar lógica para manejar esas presentaciones de formularios accediendo a los datos que se presentaron a través de ese formulario e insertando ese nuevo cumpleaños en la base de datos. Después de hacer eso, los usuarios deberían poder visitar tu aplicación web, completar ese formulario escribiendo su nombre, un mes y un día, y tener su cumpleaños agregado a tu base de datos de cumpleaños. Como resultado, su nombre y cumpleaños deberían aparecer también en tu tabla HTML. 

¿Cómo podrías hacer esto? Bueno, para ejecutar consultas SQL en tu base de datos, puedes usar db.execute. Recuerda que DB es el nombre que representa esa base de datos que tenemos dentro de nuestra aplicación Flask. Y execute te permitirá ejecutar una consulta como un select o un insert en esa base de datos desde tu programa en Python. Y también recuerda que si agregas signos de interrogación a esa consulta, puedes usarlos como marcadores de posición para otros valores, de modo que puedas sustituir los valores que provienen del usuario, como a través de una presentación de formulario, por ejemplo, como parte de la consulta que estás ejecutando. 

Mientras lo haces, también querrás tener en cuenta la distinción entre estos dos diferentes métodos de solicitud, GET y POST. Cuando el usuario esté obteniendo la página, lo único que vas a hacer es consultar todos los cumpleaños y mostrar esa página HTML que tiene esa tabla de todos los cumpleaños. POST, mientras tanto, es lo que va a suceder cuando el usuario envíe un formulario. Querrás asegurarte de que tu formulario tenga un método POST para asegurarte de que cuando envíes datos, los estás enviando a través de POST. Y luego, asegúrate de que tu ruta pueda manejar esas solicitudes POST, agregando cada uno de los cumpleaños a la base de datos de modo que la próxima vez que el usuario visite esa página, su cumpleaños estará en esa página también.

Mi nombre es Brian, y esto fue birthdays.