En este laboratorio, tu tarea será escribir un programa en Python que simule los resultados de un torneo deportivo. En un torneo deportivo, como la Copa Mundial de la FIFA u otros torneos deportivos, a menudo los torneos terminan en un sistema de eliminación directa en el que se termina con un conjunto de equipos que juegan entre ellos. Los ganadores avanzan a la siguiente ronda y luego juegan entre ellos. Los ganadores se vuelven a mover a la siguiente ronda, juegan entre ellos y, finalmente, los dos últimos equipos juegan y el equipo ganador se declara el ganador del torneo.

¿Cómo podemos simular este tipo de torneo? Bueno, para hacerlo, necesitamos una idea de qué tan buenos son cada uno de estos equipos para que podamos comparar dos equipos y hacer una predicción sobre quién es más probable que gane un partido entre esos dos equipos. A menudo, los equipos o jugadores tienen calificaciones, algún número que determina qué tan bueno es ese equipo o jugador, y como resultado, podemos usar esa información para comparar dos calificaciones para determinar quién podría ganar un juego entre dos equipos, por ejemplo.

En última instancia, tu programa va a usar este tipo de información, una lista de equipos y cuáles son sus calificaciones, para simular un torneo y simular cuál es la probabilidad de que cualquier equipo en particular gane ese torneo. Para hacerlo, necesitarás acceso a algunos datos, por lo que te daremos algunos datos con formato de archivo CSV, valores separados por comas, en el que cada línea corresponde a un equipo que tiene dos valores. Primero el nombre del equipo, es decir, de qué país, por ejemplo, es ese equipo, seguido de una coma y luego la calificación para ese equipo, algún número que representa la fuerza de ese equipo donde una calificación más alta significa que el equipo es mejor y, por lo tanto, es más probable que gane un partido contra un equipo con una calificación más baja, por ejemplo. Cuanto mayor sea la diferencia entre las calificaciones de los dos equipos, mayor será la probabilidad de que el equipo con la calificación más alta gane ese juego.

Si almacenamos esta información dentro de un archivo CSV, tu programa funcionará de la siguiente manera. Vas a ejecutar python tournament.py, seguido de un archivo CSV. El que tenemos aquí es el de los equipos de la Copa Mundial de la FIFA masculina del 2018 y después, el programa va a simular un montón de torneos, quizás simulando 1,000 torneos diferentes dentro de estos equipos y luego imprimir, basado en esos resultados, cuál es la probabilidad que el programa piensa que cualquier país tendrá de ganar todo el torneo.

¿Cómo vas a hacer eso? Bueno, empecemos echando un vistazo al código de distribución que te damos como parte de este laboratorio. Para este laboratorio, te damos un par de archivos. Te damos algunos archivos CSV, cada uno de los cuales va a contener una lista de equipos, así como qué calificación tiene cada uno de esos equipos. Y te lo damos para un par de torneos diferentes, pero luego tournament.py es donde está toda la lógica. Este es el archivo Python que usarás para simular uno de estos torneos deportivos.

Empezamos aquí definiendo una variable n que es igual al número de simulaciones que se ejecutarán, y por defecto simularemos 1,000 torneos diferentes con estos equipos. Dentro de la función principal, comprobamos que el programa se esté utilizando correctamente con un nombre de archivo proporcionado como argumento. Luego definimos una variable llamada equipos, que inicialmente va a ser una lista vacía, no hay equipos que conozcamos todavía. Pero lo primero que querrás hacer es leer del archivo CSV todos esos equipos, ordenando cada equipo dentro de esta lista de equipos, almacenando cada equipo con un diccionario donde ese diccionario almacenará valores tanto para el nombre del equipo como para la calificación para ese equipo.

Después de eso, definimos otro diccionario llamado "cuenta" y la cuenta va a ser un diccionario que asigna claves a valores como todos los diccionarios, donde en este caso, las claves van a ser los nombres de los equipos y los valores van a ser cuántos torneos ha ganado ese equipo. Porque en última instancia vamos a simular n torneos, donde por defecto n va a ser 1,000 y queremos realizar un seguimiento de cuántas veces un equipo determinado gana un torneo. Y si un equipo gana el torneo 100 veces, entonces ese nombre de equipo va a ser la clave y 100 va a ser el valor, para que podamos recordar para cualquier equipo determinado cuántos torneos ganó según nuestra simulación. Y basado en esa simulación, ya hemos escrito un código que recorre cada uno de esos equipos e imprime cuál es la probabilidad que esperamos que tenga de ganar todo el torneo.

También te hemos dado un par de otras funciones. Te hemos dado una función llamada simular_juego que acepta dos equipos como entrada. Y lo que hará es regresar verdadero si, según la simulación, el equipo 1 gana y falso de lo contrario. Esta función utiliza cierta aleatoriedad, no siempre va a devolverte el mismo resultado cada vez, y cuando dos de los mismos equipos juegan un partido, es probable que no sea el caso de que el mismo equipo gane cada vez. También hay cierta variabilidad en la función.

Lo que hace la función es mirar la calificación de ambos equipos, calificación 1 y calificación 2, y usa esa información para calcular cuál es la probabilidad que el equipo 1, por ejemplo, gane el juego. Y luego, al azar, utilizando esa probabilidad, devuelve verdadero a veces si el equipo 1 gana y falso de lo contrario.

También te hemos dado una función llamada simular_ronda, que hace lo mismo, pero no solo para un juego sino para una ronda completa de juegos entre muchos equipos diferentes. La función simular_ronda acepta como entrada una lista de equipos, y lo que hace la función simular_ronda es considerar a cada uno de esos pares de equipos uno por uno, equipos 0 y 1, luego 2 y 3, así hasta el par 6 y 7, por ejemplo. Simula el juego entre cada uno de ellos, devolviéndote una lista de los ganadores de esa ronda. Entonces, si le das a simular_ronda una lista de ocho equipos, por ejemplo, entonces simular_ronda te devolverá una lista de los cuatro ganadores de los emparejamientos entre equipos 0 y 1, 2 y 3, 4 y 5, y 6 y 7.

Finalmente, aquí está la función "simular_torneo". Esta función debe simular todo el torneo, comenzando con todos los equipos, que puedes suponer serán alguna potencia de 2, como 16 equipos, por ejemplo. Y luego simular rondas repetidamente hasta que solo quede un ganador de todo el torneo y se dejará en tus manos completar esa función.

Entonces, para resumir lo que debe hacer en tournament.py. Primero, debes completar la función principal usando "csv.DictReader", puedes leer los equipos desde el archivo CSV uno por uno, tratando a cada equipo como un diccionario, donde hay una clave llamada "equipo" que representa el nombre del equipo y una clave llamada "calificación" que representa la calificación del equipo. Ahora, por defecto, cuando lees archivos como un archivo CSV, lo va a tratar todo como una cadena y, como la calificación es un número, querrás asegurarte de que conviertes esa calificación a un entero primero.

Una vez que lo hagas, vas a almacenar cada equipo como un diccionario dentro de esa lista de equipos. Entonces los equipos terminan siendo una lista de diccionarios, un diccionario por equipo. Y una vez que tengas esa lista de equipos, puedes simular n torneos, donde n de manera predeterminada es 1,000, llamando a tu función "simular_torneo".

Después de cada uno de esos torneos, que podrías imaginar teniendo en algún tipo de ciclo que se va a repetir simulando un torneo después de otro, querrás realizar un seguimiento del recuento de victorias dentro de tu diccionario "cuenta", realizando un seguimiento de cuántas veces ese equipo ganó en uno de tus torneos simulados.

También querrás completar la función "simular_torneo". La función "simular_torneo" nuevamente debe simular un torneo completo, aceptando una lista de equipos y produciendo quién es el ganador del torneo simulado. Al hacerlo, probablemente querrás llamar a la función "simular_ronda", que ya escribimos para ti, que acepta una lista de equipos y devuelve una lista de los ganadores de esa ronda. Y probablemente querrás ejecutar esta función varias veces, simulando repetidamente rondas hasta que solo quede un equipo. Si comienzas con un torneo con 16 equipos y pasas esos equipos a simular_ronda, obtendrás una lista de ocho ganadores.

Si simulas una ronda con esos