En este laboratorio, tu tarea va a ser escribir un programa en C que cambie el volumen de un archivo de audio. En concreto, en este laboratorio, trabajaremos con archivos WAV, un formato de archivo estándar para representar información de audio.

¿Cuál es la estructura de un archivo WAV? Bueno, como cualquier archivo, estos archivos consisten en bytes. Y en particular, en un archivo WAV, los primeros 44 bytes de ese archivo son la cabecera de ese archivo WAV que contiene información sobre ese archivo que tu computadora, o programas en tu computadora, podrían necesitar conocer para leer, entender e interpretar ese archivo. Después de la cabecera de 44 bytes, hay muestras de audio de dos bytes. Muchas de estas muestras de audio de dos bytes se repiten una detrás de otra, donde cada una de estas muestras de dos bytes representa el valor de alguna forma de onda de audio en un punto particular en el tiempo.

Entonces, en última instancia, tu archivo WAV va a consistir en una cabecera de 44 bytes seguida de muchas de esas muestras de dos bytes. Y lo interesante acerca de esas muestras de dos bytes es que cada una es realmente sólo un número. Y si deseas cambiar el volumen de una muestra, vas a multiplicar esa muestra por un número.

Si tengo una muestra de audio, y quiero duplicar el volumen, por ejemplo, tomaría cada una de las muestras de audio en el archivo de audio que estoy tratando de modificar y simplemente multiplicaría cada uno de esos valores de muestra por 2. De manera similar, si estoy intentando reducir el volumen a la mitad para un archivo de audio en particular, entonces tomaré cada una de las muestras de dos bytes, y multiplicaré cada una por 0.5, o 1/2, para reducir el volumen a la mitad también.

En última instancia, la forma en que funcionará tu programa es que ejecutaremos nuestro programa como "./volume" seguido de tres argumentos de línea de comando. El primer argumento de línea de comando es un archivo WAV de entrada, algún archivo que ya existe representando el archivo de audio que intentaremos modificar. El siguiente argumento de línea de comando es el nombre de algún archivo de salida, algún nuevo archivo de audio que nuestro programa va a generar que va a tener el volumen modificado.

Y finalmente, el último argumento de línea de comando para este programa va a ser un número de punto flotante que representa el factor por el cual cambiar el volumen del archivo de audio original. En este caso, por ejemplo, estamos usando un factor de 2.0 para significar que queremos doblar el volumen del archivo de audio. Pero si en vez hubiéramos tratado de usar 0.5, por ejemplo, como el factor, entonces estaríamos reduciendo a la mitad el volumen del archivo de audio.

Entonces, esto es lo que necesitarás hacer en este laboratorio. Para tomar el archivo de entrada y luego generar un nuevo archivo de salida que sea el mismo audio pero sólo con el volumen cambiado, querrás empezar con la cabecera de ese archivo WAV, ya que la cabecera, los primeros 44 bytes del archivo son lo primero que encontrarás dentro del archivo WAV de entrada. Entonces, inicialmente, querrás leer la cabecera del archivo de entrada. Y luego querrás escribir exactamente la misma cabecera al archivo de salida. Después de la cabecera, recordemos, vienen cada una de esas muestras de dos bytes, muchas muestras de dos bytes, una detrás de otra en el archivo, representando la forma de onda de audio del archivo en sí.

Entonces, querrás repetir, para cada una de esas muestras de 2 bytes, querrás leer primero la muestra del archivo de entrada, probablemente en alguna variable. Y luego, querrás multiplicar ese valor de muestra por el factor de volumen. Si estás tratando de duplicar el volumen de la muestra, entonces duplicarás ese volumen. Si estás tratando de triplicarlo, lo multiplicarás por 3. Si estás tratando de reducir el volumen a la mitad, lo multiplicarás por 0.5, por ejemplo.

Y después de esa multiplicación, escribirás esa nueva muestra al archivo de salida. Para que la muestra actualizada, con el volumen modificado, termine siendo escrita en el archivo de salida para cada una de las muestras de audio en todo el archivo.

A medida que trabajes en este laboratorio, un par de técnicas serán útiles. Una es aprovechar los diferentes tipos que C te proporciona para manejar datos de diferentes tamaños. uint8_t, por ejemplo, es un tipo que almacena enteros sin signo que tienen 8 bits, o 1 byte de tamaño. Y esto es útil en cualquier momento en que desees representar sólo un byte genérico de datos. Por ejemplo, si estás tratando de leer una cabecera que tiene 44 bytes de datos, podrías usar una matriz de 44 de estos enteros sin signo de tamaño de 8 bits como uint8_ts, dentro de una matriz, para almacenar tu cabecera.

Mientras tanto, int16_t es un tipo que almacena enteros con signo, lo que significa que podrían ser positivos o 0 o negativos, de 16 bits, o 2 bytes cada uno. Y en última instancia, esta es una gran elección de tipo para representar tus muestras. Porque sabemos que cada muestra tiene 2 bytes de tamaño. Y int16_t es el tamaño perfecto para representar este tipo de información.

A continuación, también querrás manejar la lectura y escritura de archivos. Y para eso, estas dos funciones serán de gran ayuda: fread y fwrite. fread leerá un cierto número de bytes de algún archivo a la memoria dentro de tu computadora. Y de manera similar, fwrite puede escribir datos desde la memoria de tu computadora a un archivo en particular. Y probablemente querrás buscar la documentación para cada una de estas funciones, fread y fwrite, para comprender qué argumentos toman, en qué orden y cómo podrías usar estas funciones para leer del archivo de entrada y luego escribir tus datos actualizados en tu archivo de salida.

Ahora echemos un vistazo al código de distribución que te damos como parte de este laboratorio. Notarás que una de las primeras cosas que te damos es una constante entera llamada HEADER_SIZE, igual a 44. Puedes usar esta variable en cualquier momento que necesites hacer referencia al número de bytes dentro de la cabecera de un archivo WAV, como esta constante entera llamada HEADER_SIZE.

Dentro de la función principal, ya hemos hecho algo de trabajo por ti. Primero, verificando el número de argumentos de línea de comando para asegurarnos de que cuando el usuario esté ejecutando este programa, proporcionen un archivo de entrada, un archivo de salida, así como algún factor para cambiar el volumen del archivo de entrada. Luego abrimos el archivo de entrada, verificando que el archivo de entrada se pudo abrir correctamente. Luego abrimos el archivo de salida con el modo W, W para escribir ese archivo, a fin de asegurarnos de que podemos abrir correctamente el archivo en el que vamos a escribir. Y luego calculamos el factor, convirtiendo ese factor en un número de punto flotante como 2.0 para duplicar el volumen o 0.5 para reducir el volumen a la mitad.

Ahora, entonces, este es tu trabajo por hacer. Lo primero que desearás hacer es copiar la cabecera del archivo de entrada al archivo de salida. Recuerda que sabes que la cabecera siempre va a ser de 44 bytes. Por lo tanto, probablemente querrás usar fread para leer 44 bytes de tu archivo y luego fwrite para escribir 44 nuevos bytes en el archivo de salida.

Luego querrás revisar cada una de las muestras, probablemente usando algún tipo de bucle para recorrer el archivo de entrada hasta llegar al final del archivo. Y para cada una de esas muestras de dos bytes, deberás leerla en la memoria, actualizar el volumen y luego escribir esa muestra actualizada en el archivo de salida también.

Notarás que te proporcionamos un archivo de entrada de muestra, input.wav, que puedes escuchar como una muestra de audio. Y puedes ejecutar tu programa de volumen en este archivo, pasando un factor de 2.0 para duplicar el volumen, u otro factor para cambiar el volumen en una cantidad diferente. Y luego deberías poder escuchar ese nuevo archivo de salida y detectar que tiene el mismo audio, sólo con un volumen diferente.

Después de haber hecho todos esos pasos, deberías tener un programa que puedas tomar cualquier archivo WAV y cambiar el volumen por un factor particular.

Me llamo Brian. Y esto fue volume.