Así que los arreglos. Los arreglos son realmente donde Python empezará a lucirse y mostrarnos algunas de las verdaderas ventajas que tiene sobre un lenguaje como C, que está un poco más limitado en lo que puede hacer con los arreglos debido a dos cosas. En primer lugar, tienen un tamaño fijo y, en segundo lugar, sólo podemos almacenar un tipo de variable en ellos. Sólo podemos almacenar un arreglo de todos enteros, todos caracteres, alguna estructura que hayamos creado, y así sucesivamente. En Python, en realidad no los llamamos arreglos. Los llamamos listas, pero son efectivamente la misma idea general, el mismo concepto que conocemos. No tienen tamaño fijo. Así que, similar a una lista enlazada, podemos hacerlas crecer y achicar según lo necesitemos, según nuestro programa exija más o menos memoria para ser consumida por la lista. Y siempre podemos agregar más cosas, unir o quitar cosas del medio bastante fácilmente. Así que vamos a acostumbrarnos a llamar a estas cosas listas ahora en lugar de arreglos. Pero para declarar una lista es realmente bastante sencillo. Nums igual corchetes. Ahí lo tenemos. Esa es una lista vacía o un arreglo vacío. Pero eso es todo lo que realmente necesitamos hacer para hacerlo. Podríamos crear una lista que tenga un par de elementos pre-populados en ella. Nums igual 1, 2, 3, 4. Esa es una lista creada explícitamente. Python también tiene soporte para algo llamado una comprensión de lista, pero no vamos a entrar en muchos detalles aquí, pero quiero mostrarles cómo se ve. Nums igual x, y luego tengo un bucle for dentro de mi declaración de mi lista. Esto se llama comprensión de lista y, básicamente, lo que estoy haciendo es usar el bucle for para generarme una lista de números. Y en lugar de hacer cualquier cosa con esa lista como donde la imprimía antes, estoy usando esa lista que el bucle for genera para asignarla a nums. Así que esto crearía una lista de 500 elementos, todos los números desde 0 hasta 499, porque de nuevo range excluye ese parámetro final. Así que no estamos incluyendo 500. Nuestro rango tiene 500 cosas, pero va desde 0 hasta 499, no de 0 a 500, lo que serían 501 cosas en la lista. Ahora, en lugar de la sintaxis de corchetes, también podemos decir nums igual lista paréntesis, que es una función que crea una lista, y si no le pasas nada, devuelve una lista vacía o un conjunto vacío de corchetes. Así que eso es exactamente lo mismo que vimos hace un momento con la lista vacía en blanco. Ahora tenemos lo siguiente. Podríamos decir nums igual 1, 2, 3, 4. Eso crea explícitamente una lista de cuatro elementos. Podemos adjuntar un elemento al final de la lista. Podemos decir nums punto append 5. Y lo que eso va a hacer es añadir 5 al final de la lista. Va a agregarlo al final directamente. Esta línea de código haría exactamente lo mismo. Nums punto insert paréntesis 4, 5. Bueno, ¿qué significa esto? Bueno, lo que está pasando aquí es que estamos insertando en la cuarta posición, contando desde 0, y si recuerdas cómo contábamos en C, sabemos que 1 aquí está en la posición 0, 2 está en la primera posición, 3 está en la segunda posición, 4 está en la tercera posición. Así que lo que estamos haciendo aquí es simplemente insertar en la cuarta posición el valor 5. Así que esta línea, y la que acabamos de ver, hacen exactamente lo mismo. Ponen un 5 al final de ese arreglo. Esto también hace lo mismo. Nums corchetes de longitud de nums a 5 igual 5. Un poco más extraño, pero básicamente lo que estamos haciendo aquí es crear otra lista efectivamente, y la estamos entrelazando en la que existe antes. Así que lo que estoy diciendo es que estoy creando una nueva lista. Hay una lista allí con un sólo elemento, el 5. Y estoy diciendo que la lista nums desde la posición 4, que es la longitud de nums hacia adelante, recibe esta lista asignada a ella. Así que si hubiera puesto 5,6 allí, después de esto ejecutarse, terminaría con nums igual 1,2,3,4,5,6. Entonces así es como puedo quizás unir una lista al final de otra, en lugar de unir un elemento al final de una lista. Así que len nums funciona justo como strlen podría si estás familiarizado con eso de C. Calcula la longitud de una lista. Así que len ahora se convierte en una función en Python que se puede utilizar para calcular no sólo la longitud de una cadena, sino también la longitud de cualquier lista arbitraria. Bastante útil.