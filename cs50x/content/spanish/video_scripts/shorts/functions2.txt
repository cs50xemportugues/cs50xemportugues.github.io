Muy bien. Las funciones son geniales. Lo sabemos. Ahora vamos a empezar a escribirlas. Vamos a empezar a incluirlas en nuestros programas. Para hacer esto, lo primero que hacemos es declarar la función. Cuando declaras una función, básicamente le estás diciendo al compilador "oye, solo para que sepas, voy a escribir una función más adelante y esto es lo que va a ser". La razón de esto es porque los compiladores pueden hacer cosas extrañas si ven un conjunto de símbolos con los que no están familiarizados. Así que simplemente le damos al compilador una idea, estoy creando una función y hará esto. Generalmente, si estás organizando el código de una manera que los demás puedan entender y utilizar, es recomendable que pongas todas las declaraciones de funciones al principio de tu código, justo antes de escribir main. Y, conveniente, hay una forma estándar que sigue cada declaración de función. Todas se parecen a esto. Hay tres partes en una declaración de función: tipo de retorno, nombre y lista de argumentos.

El tipo de retorno es el tipo de variable que la función va a producir. Por ejemplo, si pensamos en la función que multiplica dos números, ¿qué esperamos si multiplicamos un entero por otro entero?. Probablemente obtendremos un entero, ¿verdad?. Al multiplicar dos enteros juntos, obtenemos un entero. Por lo tanto, el tipo de retorno de esa función sería entero. El nombre es como quieres llamar a tu función. Esta es probablemente la parte menos importante de la declaración de la función en términos de funcionalidad, pero en realidad es una de las partes más importantes de la declaración de la función en términos de saber lo que la función realmente hace. Si llamas a tu función f o g o h o misterio o algo así, probablemente te confundirás tratando de recordar qué hacen esas funciones. Así que es importante dar nombres significativos a tus funciones.

Por último, la lista de argumentos es la lista separada por comas de todas las entradas a tu función, cada una de las cuales tiene un tipo y un nombre. Por lo tanto, no solo tienes que especificar qué tipo de variable producirá la función, sino que también querrás especificar qué tipos de variables la función aceptará como entradas. Así que hagamos un ejemplo. Echemos un vistazo a un ejemplo más concreto. Aquí hay un ejemplo de declaración de función para una función que sumaría dos enteros. La suma de dos enteros también será un entero, como acabamos de discutir. Por lo tanto, el tipo de retorno aquí en verde, sería entero. Esto nos dice que la suma de dos enteros producirá al final del día un entero. Dado lo que hace esta función, queremos darle un nombre significativo. "Sumar dos enteros" parece apropiado, considerando que tomamos dos enteros como entradas y esperamos que los sume. Podría ser un nombre un poco incómodo, y francamente esta función probablemente no es necesaria, ya que tenemos el operador de suma, si recuerdas nuestra discusión sobre los operadores anteriormente. Pero digamos, por argumentos, que esta función es útil y la llamaremos "sumar dos enteros". Por último, esta función toma dos entradas, cada una de las cuales es un entero. Por lo tanto, tenemos esta lista separada por comas de entradas. Y generalmente querrás dar un nombre a cada una de ellas para que puedan ser utilizadas dentro de la función. Los nombres no son muy importantes. En este caso, no tenemos conocimiento de ningún significado adjunto a los mismos. Entonces, podemos llamarlos a y b. Eso está totalmente bien. Sin embargo, si te encuentras en una situación en la que los nombres de las variables pueden ser importantes, es posible que desees llamarlos de otra manera que les dé un significado más simbólico. Pero en este caso, no sabemos mucho más acerca de la función, simplemente queremos sumar dos enteros. Así que simplemente los llamamos a y b. Ese es un ejemplo.

¿Por qué no tomas un segundo para pensar en cómo escribir la declaración de función para una función que multiplique dos números de punto flotante? ¿Recuerdas qué es un número de punto flotante? ¿Cómo se vería esta declaración de función? En realidad, recomiendo que detengas el vídeo aquí y que te tomes el tiempo que necesites. Piensa en cómo sería esta declaración de función. ¿Cuál sería el tipo de retorno? ¿Cuál sería un nombre relevante? ¿Cuáles serían las entradas?. Así que detén el vídeo aquí y escribe la declaración de función para una función que multiplique dos números de punto flotante. Espero que hayas detenido el vídeo.

Entonces veamos un ejemplo de una posible declaración. "Punto flotante multiplicar dos reales, punto flotante x, punto flotante y". El producto de dos números de punto flotante, que recordemos cómo representamos números reales o números con valores decimales en C, va a ser un número de punto flotante. Cuando multiplicas un decimal por otro decimal, es probable que obtengas un decimal. Quieres darle un nombre relevante. "Multiplicar dos reales" parece bien. Pero realmente podrías llamarlo "multiplicar dos flotantes" o "multiplicar flotantes". Cualquier cosa así, siempre y cuando le dé algún significado real a lo que esta caja negra va a hacer. Y nuevamente, en este caso, no parece haber ningún significado adjunto a los nombres de las variables que estamos pasando, por lo que simplemente los llamamos x e y. Ahora, si les hubieras llamado de otra manera, eso estaría totalmente bien. De hecho, si en lugar de flotantes, usaras "doubles", que es una forma diferente de especificar números reales o variables de punto flotante con más precisión, eso estaría bien también. Cualquiera de estos sería válido. De hecho, hay varias combinaciones diferentes de formas de declarar esta función. Pero estas son dos muy buenas.