Si ya has visto nuestro video sobre estructuras, ya sabes que tenemos la capacidad de definir nuestros propios tipos de datos. Pero si has usado estructuras, sabes que a veces usar esos tipos de datos puede ser un poco engorroso porque tenemos que usar la palabra clave struct cuando estamos trabajando con ellos, struct car or struct student. Eso es mucho para escribir si solo queremos tener algo simple, como una estructura. Queremos poder trabajar con las cosas de una manera más abreviada, como int o char, algo mucho más conveniente de escribir. Afortunadamente, hay una manera de hacer esto en C, con algo llamado typedef, que es una forma de crear nombres abreviados o reescritos para tipos de datos. Puedes reescribir los tipos de datos que ya existen o puedes escribir tipos de datos por tu cuenta.

Lo primero que haces es definir un tipo de la forma normal y luego simplemente lo nombras de otra forma: typedef nombre anterior nombre nuevo. Bastante sencillo ¿verdad? Entonces, por ejemplo, podríamos definir typedef del tipo de datos ya existente de unsigned char como byte. Y desde entonces, después de haber hecho esta definición de tipo, que normalmente estará en la parte superior de nuestros archivos .C, o en un archivo .H separado, podemos usar simplemente byte en cualquier lugar donde hubiéramos usado unsigned char. Eso es mucho más fácil de escribir.

En la biblioteca de CS50, hacemos esto: typedef char star como string, porque abstraemos la idea de los punteros. Y el hecho de que una cadena en realidad es un puntero al primer carácter: una matriz de caracteres, porque es algo confuso de entender, pero de hecho es lo que hacemos. Y esta línea de código realmente existe en CS50.h typedef char star string, solo para hacerlo un poco menos tedioso a la hora de tratar con él. Ya has visto un poco del valor aquí, pero typedef es genial al combinarse con estructuras, como mencioné antes. Las estructuras tienen un nombre de tipo de dos palabras. Y así pueden ser realmente molestas para crear variables de ese tipo, o [INAUDIBLE] de struct algo, tus líneas pueden volverse realmente, realmente largas. Y así puedes usar typedef para crear algo mucho más corto.

Entonces, si defino un coche de la siguiente manera, tengo mi definición de un coche: struct car, y luego llave abierta, todos los campos de mi estructura, llave cerrada, punto y coma. Después de haber definido mi tipo de datos, puedo typedef struct car como car_t. Y luego, cuando lo he hecho, ahora cada vez que hubiera usado struct car, puedo usar car_t. Eso es una forma mucho más corta de expresar esta idea de esta estructura que acabo de crear.

Alternativamente, porque las estructuras se usan tan comúnmente en typedef, puedes definir el tipo en el medio. Así que la estructura typedef suele ser typedef, nombre anterior, nombre nuevo, donde los nombres son tipos que ya has creado. Pero puedes definir una estructura justo en el medio de typedef en lugar de tener que definirla por separado y luego hacer un typedef de ella. Y eso se vería así: typedef struct car, llave abierta, todas tus definiciones de campo, llave cerrada, car_t. Por lo que el nombre anterior es todo eso en rojo, simplemente defines la estructura y le das un nombre al mismo tiempo. Y luego el nombre nuevo es car_t. Y así, si empezamos a usar esto en el código, anteriormente podría haber dicho struct car mycar punto y coma. Bueno, ya no tengo que hacer eso. Ahora que he usado el typedef, solo puedo decir car_t, mycar. Eso es una forma mucho más corta de hacerlo, y de hecho, será mucho más conveniente, especialmente a medida que empieces a usar estructuras con más frecuencia en tu código.

Soy Doug Lloyd. Esto es CS50.