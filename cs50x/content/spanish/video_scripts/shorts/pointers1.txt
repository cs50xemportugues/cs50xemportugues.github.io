Punteros, aquí estamos. Este es probablemente el tema más difícil del que hablamos en CS50. Y si has leído algo sobre punteros antes, es posible que te sientas un poco intimidado al ver este video. Es cierto que los punteros te permiten tener la capacidad de arruinar bastante mal las variables, los datos y hacer que tu programa se bloquee. Pero son realmente útiles y nos permiten una forma muy eficaz de pasar datos de ida y vuelta entre funciones que, de otro modo, no podríamos hacer.

Lo que realmente queremos hacer aquí es entrenarte para que tengas una buena disciplina con los punteros, para que puedas usarlos de manera efectiva y hacer que tus programas sean mucho mejores. Como dije, los punteros nos dan una forma diferente de pasar datos entre funciones. Ahora, si recuerdas de un video anterior, cuando hablábamos del alcance de las variables, mencioné que todos los datos que pasamos entre funciones en C se pasan por valor. Quizás no haya usado ese término antes, lo que quería decir es que estamos pasando copias de datos. Cuando pasamos una variable a una función, en realidad no estamos pasando la variable a la función, ¿verdad? Estamos pasando una copia de esos datos a la función. La función hace lo que quiere y calcula algún valor, y tal vez lo usamos cuando lo devuelve de nuevo.

Había una excepción a esta regla de pasar por valor, y volveremos a esto un poco más adelante en este video. Si usamos punteros en lugar de usar las variables, o en lugar de usar las variables mismas o copias de las variables, ahora podemos pasar las variables a las funciones de una manera diferente. Esto significa que si hacemos un cambio en una función, ese cambio se llevará a cabo en otra función. Nuevamente, esto es algo que antes no podíamos hacer, y si alguna vez has intentado intercambiar el valor de dos variables en una función, has notado que este problema se presenta de alguna manera, ¿verdad?

Si queremos intercambiar X y Y, y los pasamos a una función llamada intercambio, dentro de la función intercambio, las variables intercambian valores. Uno se convierte en dos, dos se convierte en uno, pero en realidad no cambiamos nada en la función original, en el llamador. Porque no podemos, solo estamos trabajando con copias de ellos. Con los punteros, sin embargo, podemos pasar X e Y a una función. Esa función puede hacer algo con ellos. Y los valores variables pueden cambiar. Así que eso es un gran cambio en nuestra capacidad para trabajar con datos.

Antes de entrar en los punteros, creo que vale la pena tomar unos minutos para volver a los conceptos básicos aquí. Y echar un vistazo a cómo funciona la memoria de la computadora porque estos dos temas van a estar bastante interrelacionados. Como probablemente sabes, en tu sistema informático tienes un disco duro o tal vez un disco de estado sólido, algún tipo de ubicación de almacenamiento de archivos. Por lo general, está en el vecindario de 250 gigabytes a quizás un par de terabytes ahora. Y es donde finalmente viven todos tus archivos, incluso cuando tu computadora está apagada, puedes encenderla de nuevo y encontrarás que tus archivos están allí de nuevo cuando reinicias el sistema. Pero las unidades de disco, como una unidad de disco duro (HDD) o un disco de estado sólido (SSD), son solo un espacio de almacenamiento.

Realmente no podemos hacer nada con los datos que están en el disco duro o en una unidad de disco de estado sólido. Para cambiar realmente los datos o moverlos, tenemos que moverlos a RAM, memoria de acceso aleatorio. Ahora, tienes mucho menos RAM en tu computadora. Puedes tener alrededor de 512 megabytes si tienes una computadora más antigua, hasta tal vez 2, 4, 8, 16, posiblemente incluso un poco más de gigabytes de RAM. Así que eso es mucho más pequeño, pero es donde existe todos los datos volátiles. Allí es donde podemos cambiar cosas. Pero cuando apagamos nuestra computadora, todos los datos en RAM se destruyen.

Así que es por eso que necesitamos tener un disco duro para la ubicación más permanente de él, para que exista. Sería realmente malo si cada vez que apagamos nuestra computadora, cada archivo en nuestro sistema fuera destruido. Así que trabajamos dentro de la RAM. Y cada vez que hablamos de memoria, prácticamente, en CS50, estamos hablando de RAM, no del disco duro.

Así que cuando movemos cosas a la memoria, ocupa cierta cantidad de espacio. Todos los tipos de datos con los que hemos estado trabajando ocupan diferentes cantidades de espacio en la RAM. Así que cada vez que creas una variable entera, cuatro bytes de memoria se reservan en RAM para que puedas trabajar con esa variable entera. Puedes declarar la variable entera, cambiarla, asignarle un valor de 10 incrementado en uno, y así sucesivamente. Todo eso necesita suceder en RAM, y obtienes cuatro bytes para trabajar en cada entero que creas.

Cada carácter que creas obtiene un byte. Eso es solo cuánto espacio se necesita para almacenar un carácter. Cada número flotante, un número real, obtiene cuatro bytes a menos que sea un número flotante de doble precisión, que te permite tener más precisión o más dígitos después del punto decimal sin perder precisión, que ocupa ocho bytes de memoria. Los enteros muy grandes, los long long, también ocupan ocho bytes de memoria. ¿Cuántos bytes de memoria ocupan las cadenas? Bueno, dejemos esa pregunta por ahora, pero volveremos a ella.