Muy bien. Trabajar con variables individuales es bastante divertido. Pero, ¿qué pasa si queremos trabajar con muchas variables, pero no queremos tener un montón de nombres diferentes volando por nuestro código? En este caso, las matrices serán muy prácticas. Las matrices son una estructura de datos realmente fundamental para cualquier lenguaje de programación que se use y son realmente, realmente útiles, especialmente, como veremos, en CS50.

Usamos matrices para contener valores del mismo tipo de datos en ubicaciones de memoria contiguas. Es decir, es una forma en que podemos agrupar un montón de enteros juntos en la memoria o un montón de caracteres o flotantes juntos en memoria muy cerca uno del otro y trabajar con ellos sin tener que dar a cada uno su propio nombre único, lo que puede resultar engorroso después de un tiempo.

Una forma de hacer una analogía con las matrices es pensar en la oficina de correos local por un segundo. Así que alejémonos de la programación y simplemente cierra los ojos y visualiza en tu mente la oficina de correos local. Por lo general, en la mayoría de las oficinas de correos, hay un gran banco de cajas de correos en la pared.

Una matriz es un bloque gigante de memoria contigua, de la misma manera que un banco de correo en su oficina de correos local es un gran espacio en la pared de la oficina de correos. Las matrices se han dividido en bloques pequeños y del mismo tamaño de espacio, cada uno de los cuales se llama elemento, de la misma manera que la pared de la oficina de correos se ha dividido en bloques pequeños y del mismo tamaño, a los que llamamos un apartado postal. Cada elemento de la matriz puede almacenar cierta cantidad de datos, al igual que cada casilla de correo puede contener una cierta cantidad de correo.

Lo que se puede almacenar en cada elemento de la matriz son variables del mismo tipo de datos, como int o char, al igual que en su casilla de correo, solo puede caber cosas de un tipo similar, como cartas o paquetes pequeños. Por último, podemos acceder a cada elemento de la matriz directamente por número de índice, al igual que podemos acceder a nuestra casilla de correo conociendo su número de casilla. Espero que esa analogía te ayude a entender la idea de las matrices al hacer una analogía con algo más con lo que probablemente ya estás familiarizado.

En C, los elementos de una matriz se indexan a partir de 0, no de 1. Y esto es realmente importante. Y de hecho, es por eso que nosotros, en CS50, y por qué los científicos de la computación suelen contar desde 0, es por el indexado de la matriz en C, que siempre comienza en 0. Entonces, si una matriz consta de n elementos, el primer elemento de esa matriz se encuentra en el índice 0, y el último elemento de la matriz se encuentra en el índice n menos 1. Nuevamente, si hay n elementos en nuestra matriz, el último índice es n menos 1.

Entonces, si nuestra matriz tiene 50 elementos, el primer elemento se encuentra en el índice 0, y el último elemento se encuentra en el índice 49. Desafortunadamente, o afortunadamente, dependiendo de tu perspectiva, C es muy tolerante aquí. No evitará que salgas de los límites de tu matriz. Podrías acceder al elemento -3 de tu matriz o al elemento 59 de tu matriz, si tu matriz solo tiene 50 elementos. No impedirá que tu programa se compile, pero en tiempo de ejecución, podrías encontrar un temido error de segmentación si comienzas a acceder a la memoria que está fuera de los límites de lo que le pediste a tu