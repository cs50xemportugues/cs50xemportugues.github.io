Al igual que en C, cada columna de nuestra tabla SQL es capaz de contener datos de diferentes tipos de datos. Entonces, en C, por ejemplo, teníamos caracteres, cadenas, enteros y flotantes. Y SQL tiene algunos tipos de datos más que eso. Esta es solo una lista de 20 de ellos, y esta lista no es exhaustiva. Pero algunas de estas cosas deberían ser familiares. Por ejemplo, tenemos int, que puede almacenar enteros. Pero también tenemos estos otros cuatro tipos, que pueden contener enteros con diferentes límites superiores. Entonces, puede recordar que, en C, el límite superior de un entero es 2 a la 31 potencia, o 2 a la 32 potencia si son enteros sin signo. Pero aquí podemos decir pequeños enteros, enteros diminutos, medianos o grandes, cada uno de los cuales tiene diferentes límites superiores en los valores. Decimal y flotante tienen lugar de doble y flotante, con los que estamos familiarizados en C. También podemos almacenar fechas y marcas de tiempo en bases de datos SQL. No hay un tipo de dato para eso que sea nativo de C. Pero en SQL, hay un par de formas diferentes de hacer esto. Incluso podemos hacer cosas más exóticas como almacenar geometría o cadenas de línea.

¿Y qué son estas? Bueno, la geometría y las cadenas de línea se pueden usar para almacenar en una base de datos SQL un mapeo o un dibujo de un área en un mapa, como el uso de datos SIG. Y realmente podemos almacenar eso en nuestra tabla SQL y recrear ese dibujo exacto un poco más tarde. El texto se asemeja a las cadenas para bloques arbitrariamente grandes de texto. Los enums también son un tipo que existe en C, pero no hablamos mucho de ellos en C. Pero muy rápidamente, lo que es un enum es una columna de su tabla que se puede usar para almacenar un conjunto limitado de valores. Entonces, por ejemplo, podría tener un enum que se llame, por ejemplo, colores favoritos. Y podría especificar cuando estoy construyendo mi tabla que solo puede ser capaz de contener rojo, verde y azul. Si intentara insertar una fila que tuviera púrpura en ese lugar, eso no funcionaría porque no es uno de los valores enumerados que se pueden almacenar en esa columna. También hay char y varchar. Y estos no son exactamente lo que podrías pensar en C. Entonces, tomémonos un momento para explicar la diferencia entre estos dos tipos de datos, que son bastante importantes. Entonces, a diferencia de C, char no se refiere a un solo carácter. En realidad, es similar a nuestra noción de una cadena, pero con la advertencia de que esa cadena es de longitud fija. Y típicamente, cuando especificamos un tipo char o varchar, tenemos que especificar la longitud de esa cadena de antemano, al igual que lo hacemos en c. Entonces, por ejemplo, mi tipo de columna podría ser un char 10. Eso significa que puedo almacenar cadenas de 10 caracteres en esa columna de mi tabla, 10 cadenas de caracteres exactamente.

Entonces, si traté de almacenar, por ejemplo, la palabra "hi", H-I, que son solo dos letras, eso iría a la columna OK. Pero también almacenaría 8 extras, el equivalente a nulos o ceros, básicamente, para que aún tuviera 10 caracteres, por así decirlo, en esa columna para esa fila. Y si intentara almacenar una cadena de 15 caracteres, eso no funcionaría. Solo terminaría almacenando las primeras 10 letras. Así que siempre serán 10, cada vez. Un varchar, por otro lado, se refiere a una cadena de longitud variable. Entonces, si dijera que mi columna era varchar 99, puedo almacenar cadenas de 1, 2, 3, 4, 5 caracteres, hasta 99 caracteres de longitud, sin tener que tener todo este espacio adicional o nulos o ceros atados al final. Char, cadenas de longitud fija. Varchar, cadenas de longitud variable. No entraremos en la diferencia entre por qué podría querer usar uno u otro. Pero hay razones por las que es posible que no siempre desee usar un varchar y es posible que desee usar un char en algunas situaciones. Ahora, SQLite en realidad tiene muchos o todos estos mismos tipos de datos. Pero la diferencia allí es que cada uno de esos tipos de datos está afiliado a lo que se llama una afinidad de tipo para simplificar las cosas.

Entonces, toda esa lista de 20, o más, en realidad, se puede reducir a una de estas cinco afinidades diferentes: nulo, entero, real, texto y blob. Null es probablemente bastante obvio, nada. Integer: números enteros. Real: incluiría cosas como decimales y flotantes. Texto incluiría cosas como char y varchar. Blob es más como la geometría o los datos que no son realmente texto, pero es solo un gran número de bits o bytes. Eso sería un blob. Y todo se puede reducir a una de estas cinco afinidades de tipo diferentes. Después de especificar las columnas, también es muy importante en nuestra tabla SQL tener otra consideración, que es tener una columna que sea nuestra clave primaria. ¿Por qué necesitamos una clave primaria? La razón es que cada fila de nuestra tabla, para que nuestras consultas SQL sean más efectivas, debe poder identificarse de manera única y rápida. Elegir la clave primaria correcta nos permitirá asegurarnos de que hay un valor en cada fila que es completamente único. Y si eso es cierto, si hay una columna en cada fila que es única, entonces podemos identificar de manera única o muy rápida qué fila estamos hablando. Ahora, también es posible establecer una clave primaria conjunta, que es solo una combinación de, digamos, dos columnas pero puede ser un número arbitrariamente grande de columnas, que siempre se garantiza que sea única. Entonces, podría tener una columna que siempre pudiera tener A, B o C. Podría tener otra columna que tenga unos y dos y tres y cuatro. Podría tener múltiples A y múltiples B y múltiples C, múltiples unos, dos y tres. Pero en todas esas filas, solo se me permite tener 1 combinación de A1. Puedo tener B1, C1. Puedo tener A2, A3, A4. Pero solo hay una combinación de esas dos columnas que es única. Eso también sería aceptable porque esa es una clave primaria conjunta.