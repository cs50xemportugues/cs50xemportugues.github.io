Hola, hablemos sobre operadores en C. Ya hemos visto uno, de hecho, el signo igual es el operador de asignación. Permite poner un valor en una variable. Ese es el operador de asignación, un solo signo igual. Para manipular y trabajar con valores y variables en C, tenemos varios operadores disponibles que podemos usar. Veamos algunos de los más comunes, empezando por los operadores aritméticos. Como podrás imaginar, en C podemos hacer operaciones matemáticas básicas. Podemos sumar, restar, multiplicar y dividir números usando los símbolos más (+), menos (-), asterisco (*) y diagonal (/), respectivamente. Aquí hay un par de líneas de código en las que hacemos esto. Tenemos int x igual a y más uno. Supongamos que en algún lugar arriba de esta línea de código había dicho int y igual a 10. ¿Cuál es el valor de x después de ejecutar esta primera línea de código? ¿Dijiste 11? Tienes razón. ¿Por qué? Bueno, y era 10. Entonces estoy diciendo int x igual a 10 más 1. 10 más 1 es 11. Entonces el valor 11 se almacena en la variable x. No está mal, ¿verdad?

¿Qué tal esta otra línea de código? x igual a x por 5. Bueno, antes de ejecutar esta línea de código, x era 11. Entonces, ¿cuál es el valor de x después de esta línea de código? Tómate un segundo. Entonces, x igual a x por 5. x era 11. Entonces, x igual a 11 por 5. O 55. Si dijiste 55, tendrías razón.

Ahora, puede ser un poco confuso, pero con la forma en que funciona la asignación en C, el valor de la derecha se asigna al valor de la izquierda. Primero evaluamos x por 5. Entonces 11 por 5 es 55. Y luego almacenamos ese valor en x. El 11 que estaba allí antes ahora se sobrescribe. Entonces, el valor de x es ahora 55. Con suerte, eso es bastante sencillo.

Hay otro operador que probablemente no hayas escuchado llamar así, pero ciertamente has trabajado con él en el pasado si recuerdas tus días de larga división en la escuela primaria. Se llama operador de módulo. Lo que hace el módulo es darte el resto cuando divides dos números juntos. Entonces, si digo 13 dividido por 4, ¿cuál es el resto? Y ese valor se calcularía con el operador de módulo.

Entonces, tengo una línea de código aquí, int m igual a 13 mod 4. Y digo aquí en un comentario que el valor de m ahora es 1. ¿Por qué digo eso? Bueno, haz la división larga en tu cabeza, si me lo permites por un segundo. Entonces, tengo 4 dividido por 13. 4 va a 13 tres veces con un resto de 1. Entonces, básicamente, todo lo que hace el operador de módulo es decirte que cuando divides, obtienes el resto. Puede pensar que en realidad no es algo muy útil, pero te sorprenderá la frecuencia con la que puede ser útil este operador de módulo. Hay algunos problemas en CS50 que tratan eso. También es bueno para hacer cosas como números aleatorios. Por ejemplo, si alguna vez has oído hablar de un generador de números aleatorios, eso te dará un número de 0 a algún número enorme. Pero tal vez solo necesites un número de 0 a 20. Si usas el operador de módulo en ese número gigante que se genera por el generador de números aleatorios, tomarás cualquier valor enorme que sea, lo dividirás por 20 y obtendrás el resto. El resto solo puede ser un valor de 0 a 19. Entonces, usarás el operador de módulo para reducir ese número grande a algo un poco más significativo. Estoy bastante seguro de que podrás usar ambos en algún momento en el futuro en CS50.

C también nos da una forma de aplicar un operador aritmético a una variable individual de una manera un poco más abreviada. En la diapositiva anterior, vimos que x es igual a x por 5 funcionó. x por 5 se almacena de nuevo en x. Hay una forma más corta de hacerlo, aunque, y es la sintaxis x más igual a 5. Es exactamente lo mismo que decir x igual a x por 5. Es solo un método ligeramente más corto. Y cuando