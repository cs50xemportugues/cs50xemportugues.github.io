¿Entonces qué es un puntero? Un puntero es un elemento de dato cuyo valor es un dirección de memoria. Eso de "zero x eight zero" que vimos es una dirección de memoria, una ubicación en la memoria. El tipo de puntero describe el tipo de dato que encontraremos en esa dirección de memoria. Entonces, si tenemos la parte de "int star", si seguimos esa flecha, nos llevará a una ubicación. Y en esa ubicación encontraremos una caja verde. Es un entero, eso es lo que encontraremos si vamos a esa dirección. El tipo de dato del puntero describe lo que encontraremos en esa dirección de memoria. 

Aquí viene la parte interesante. Los punteros nos permiten pasar variables entre funciones, y realmente pasar las variables y no copias de ellas. Porque si sabemos exactamente dónde en la memoria se encuentra una variable, no necesitamos hacer una copia de ella, podemos simplemente ir a esa ubicación y trabajar con esa variable. En esencia, los punteros hacen que el entorno informático sea más como el mundo real. 

Aquí hay una analogía. Imaginemos que tengo un cuaderno lleno de notas y me gustaría que lo actualices. Eres una función que actualiza notas. De la forma en que hemos estado trabajando hasta ahora, lo que sucede es que tomarás mi cuaderno, irás a la tienda de copias, harás una copia de Xerox de cada página del cuaderno. Dejarás mi cuaderno en mi escritorio cuando termines, irás y tacharás las cosas que están desactualizadas o incorrectas en mi cuaderno, y luego me pasarás la pila de páginas de Xerox que son una réplica de mi cuaderno con los cambios que has hecho. Y en ese punto, depende de mí, como función que llama, decidir tomar tus notas e integrarlas de nuevo en mi cuaderno. Así que hay muchos pasos involucrados aquí. ¿No sería mejor si simplemente dijera: "Oye, ¿puedes actualizar mi cuaderno por mí?", te entregara mi cuaderno y tomaras las cosas y literalmente las tacharas y actualizaras mis notas en mi cuaderno? Eso es lo que permiten hacer los punteros, hacen que este entorno sea más como cómo operamos en la realidad. 

Bien, eso es lo que es un puntero, hablemos de cómo funcionan los punteros en C y cómo podemos empezar a trabajar con ellos. Entonces hay un puntero muy simple en C llamado el puntero nulo. El puntero nulo apunta a nada. Esto probablemente no parezca muy útil, pero como veremos un poco más adelante, el hecho de que exista este puntero nulo realmente puede resultar muy útil. Y siempre que creamos un puntero y no le asignamos un valor de inmediato, si no lo configuramos para apuntar a algo específico de inmediato, siempre debemos establecer nuestro puntero para que apunte a nulo. Debemos configurarlo para que apunte a nada. 

Eso es muy diferente a simplemente dejar el valor como está y luego declarar un puntero y suponer que es nulo porque rara vez es cierto. Siempre debemos configurar el valor de un puntero a nulo si no le asignamos un valor de inmediato. Podemos verificar si el valor de un puntero es nulo usando el operador de igualdad (==), al igual que se comparan cualquier valor entero o valor de carácter utilizando el (==) también. Es un valor constante especial que se puede usar para probar. Entonces, ese fue un puntero muy simple, el puntero nulo. Otra forma de crear un puntero es extrayendo la dirección de una variable que ya hemos creado, y lo hacemos utilizando el operador de dirección "&". 

Si x es una variable que ya hemos creado de tipo entero, entonces &x es un puntero a un entero. &x es la dirección de x. Y si arr es una matriz de dobles, entonces &arr corchete i es un puntero a un doble. Entonces el nombre de una matriz es en realidad un puntero. Y cuando pasamos una matriz como parámetro o argumento de una función, los contenidos de la matriz realmente cambian tanto en la función que se llama como en la que llama. 

Entonces, por qué nos importa dónde vive algo. Bueno, es muy útil saber dónde vive algo para poder ir allí y cambiarlo. Trabajar con él y realmente hacer que lo que quieres hacer en esa variable tenga efecto, y no tener que trabajar con una copia de ella. Esto se llama desreferenciar. Vamos a la referencia y cambiamos el valor allí. Si tenemos un puntero llamado "pc" y apunta a un carácter, entonces podemos decir * pc y ese es el nombre de lo que encontraremos si vamos a la dirección pc. Lo que encontraremos allí es un carácter y * pc es cómo nos referimos a los datos en esa ubicación. 

Esto es muy similar a visitar a tu vecino. Si sabes dónde vive tu vecino, no estás interactuando con él. Si quieres interactuar con él, debes ir a su casa, debes ir a donde él vive. Y de manera similar con las variables, debes ir a su dirección si quieres interactuar con ellas, no basta con saber la dirección. Y la forma en que vamos a la dirección es usando *, el operador de desreferenciación.