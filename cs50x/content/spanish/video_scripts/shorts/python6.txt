Muy bien, aquí tenemos un nuevo tipo de dato que nunca hemos visto, o una nueva forma de almacenar datos en Python con la que no estamos familiarizados en C y que se llama tupla. Entonces, ¿qué es una tupla? Es un conjunto ordenado e inmutable de datos. Básicamente, lo que estamos diciendo aquí es que tenemos una colección de algunas cosas que nunca cambiaremos, pero el orden importa. Veremos un ejemplo en un momento de cómo podría ser una tupla o cómo podríamos trabajar con una lista de tuplas y por qué querríamos trabajar con ellas. Pero son realmente buenas para asociar colecciones de datos, son realmente rápidas de navegar en Python y son realmente análogas a una estructura en C donde los valores nunca cambiarán, pero los has organizado debido a la forma en que los has organizado en C, en un orden particular. Entonces, aquí, por ejemplo, hay una lista, una lista sobre la que acabamos de hablar, de tuplas. Estamos mezclando estos dos conceptos juntos aquí. Aquí hay una lista de tuplas. Esta es una lista llamada `presidents` que contiene cuatro tuplas, `George Washington, 1789` entre paréntesis, así es como indicamos que es una tupla; `John Adams, 1797`, y así sucesivamente. Cada una de estas, cada una de George Washington 1789 y John Adams 1797 y así sucesivamente, es una sola tupla. Y luego, aquí vemos que tenemos las comas al final de esas tuplas para indicar que todas esas son elementos en la lista más grande llamada `presidents`. Ahora, podemos iterar sobre esta lista y hacer cosas con ella. Entonces, echemos un vistazo a un ejemplo de cómo podríamos hacerlo. Entonces, en la parte superior derecha está nuestra lista `presidents` de la diapositiva anterior. Y puedo hacer lo siguiente: "Para `prez, year` en `presidents`". Ahora, fíjate que no solo digo "para `x` en rango" donde uso un solo iterador, tengo dos, `prez, year`. Y si miras, te darás cuenta de que eso realmente coincide con lo que tengo allí en la lista `presidents`. Tengo un conjunto de cuatro tuplas donde cada una está dispuesta `prez, year`. Luego hago algo raro. Imprimir en corchetes - en llaves - 1 llave 0 asumió su cargo. Formateo `prez year`. ¿Qué está pasando? En realidad, así es como la función de impresión en Python hace lo que printf hace en C. En lugar de usar `% s` o `% c` o `% d`, esos especificadores de formato a los que estamos acostumbrados en C, aquí usamos el método `format` con punto, del que hablaremos de nuevo en un momento, al final de la función de impresión. Y podemos especificar el orden en el que queremos que salgan esos parámetros. Entonces, los 1 y 0 ahí coinciden así. Ahora bien, concedido, escribí esto deliberadamente para mostrarte que podría reorganizar esta lista. También podría haber intercambiado `prez` y `year` y no necesitaría los números en absoluto. Si los dejas afuera, simplemente seguirá de izquierda a derecha a través de cualquier argumento de formato y llenará todos los vacíos entre las llaves que tienes en la función de impresión. Pero aquí, también puedo tomarlos explícitamente en un orden diferente si lo deseo. Entonces eso es todo lo que estoy haciendo aquí. Estoy obteniendo una lista. Estoy obteniendo una sola tupla de esta lista y básicamente estoy imprimiendo sus elementos en orden inverso. Así que, de nuevo, un ejemplo forzado, pero lo puse aquí deliberadamente para mostrarte la flexibilidad de la función de impresión y para introducirte varios conceptos a la vez, porque probablemente vas a ver muchas cosas como esta cuando estés investigando y tratando de averiguar qué funciones de Python usar. Verás muchas cosas poco familiares que se mezclan a la vez. Así que quería presentártelo aquí también. Pero probablemente puedes adivinar lo que esto va a hacer. Va a imprimir lo siguiente: "En 1789 George Washington asumió el cargo", "En 1797 John Adams asumió el cargo", y así sucesivamente. Va a iterar sobre la lista e imprimir cada tupla enchufando sus valores. Y como tengo el 1 y el 0 ahí en lugar de simplemente dejarlos en blanco, intercambia el orden de ellos. Okay?Otra cosa con la que estamos familiarizados en C, aunque no es nativa, es el concepto de diccionario. Ahora bien, el diccionario es generalmente parecido en espíritu al concepto de una tabla hash. Y recuerda que las tablas hash no son nativas en C, aunque son nativas en muchos lenguajes de programación. Tuvimos que construirlas nosotros mismos. Así que nos permite asociar índices con llaves en lugar de enteros, lo que tuvimos que hacer en C. Entonces, si quisiéramos tener, por ejemplo, una matriz de algo, solo podríamos referirnos a los elementos de la matriz por un número de índice, array corchete 0, array corchete 1, y así sucesivamente. En Python, ahora podemos asociar elementos de una lista o elementos, en este caso, de un diccionario con palabras clave en lugar de enteros. Entonces, por ejemplo, aquí hay un diccionario de pizzas. Entonces, familiarízate con los diferentes tipos de corchetes que usamos. Entonces, recuerda, en las listas tenemos corchetes para indicar el comienzo y el final de una lista. En las tuplas usamos paréntesis para indicar el comienzo y el final de una tupla. En los diccionarios usamos llaves para indicar el comienzo y el final de un diccionario. Dentro de este diccionario de pizza, tengo cuatro pares clave-valor. Asocio la clave queso con el valor 9, asocio la clave pepperoni con el valor 10 y así sucesivamente. ¿Ahora, cómo podríamos querer trabajar con esto? De nuevo, estos son nuestros keys. Usamos dos puntos para separar el par clave-valor. Y especificamos, y estos son nuestros valores aquí en verde. También puedo cambiar el valor de diferentes pares clave-valor en el diccionario y así sucesivamente. Así que podría decir `pizzas corchete queso` es igual a 8 y ahora la clave queso no está asociada con 9, está asociada con 8. También podría usar las diferentes claves en mi diccionario en expresiones booleanas como esta. Si `pizza corchete vegetables` es menos de 12, podría hacer algo. También puedo agregar nuevas claves al diccionario, pares clave-valor del diccionario, sin tener que hacer nada raro. `pizzas tocino`, esa clave no existía antes, es igual a 14. Ahora tenemos un diccionario que tiene cinco pares clave-valor diferentes en él. De nuevo, bastante sencillo de hacer. Pero hemos introducido un nuevo problema. Si no tenemos índices basados en enteros como lo hicimos en C, ¿cómo iteramos sobre el diccionario? No podemos simplemente iterar sobre los - supongo que podríamos iterar sobre las claves alfabéticamente, pero luego tendríamos que ordenarlas alfabéticamente. Eso se siente un poco desordenado. Afortunadamente, podemos hacer esto, y es debido a la flexibilidad del bucle for. Y señalé eso un poco antes y dije que volveríamos a hablar de cómo el bucle for era más flexible. Veamos un ejemplo de esto. Entonces, el ciclo for no se usa solo para contar desde un número hasta otro. También podemos usarlo para iterar sobre los elementos de un diccion