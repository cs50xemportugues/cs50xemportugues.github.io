Entonces, de nuevo, Python no es solo una función principal que simplemente ejecutamos por líneas. De hecho, Python no tiene una función principal por defecto. Tenemos que forzar explícitamente que tenga una función principal si queremos. Pero sí admite funciones de manera más general. Y no necesitamos especificar el tipo de retorno de las funciones. Y no necesitamos especificar los tipos de datos de ningún parámetro. Entonces, quizás recuerde de C que teníamos que especificar algo como "int square" tal vez tomaba un entero como entrada, entonces "int square ( paréntesis int x;) ". No tenemos que especificar ninguno de estos tipos de datos. Solo tenemos que especificar el nombre de la función y cualquier parámetro que tome. Introducimos una función usando la palabra clave def. Entonces, básicamente, piense en eso como la definición de la siguiente función. Y como el intérprete lee de arriba hacia abajo, no tenemos que incluir nuestra función principal. Pero si queremos incluir main porque tal vez escribimos nuestro código de manera que las cosas que queremos ejecutar primero están en realidad a 200 líneas de nuestro archivo - escribimos otras cosas arriba, tal vez estamos manteniendo nuestras funciones en orden alfabético o cualquier otra cosa. Podemos dirigir explícitamente a nuestro programa para que inicie en la función principal incluyendo esta línea al final de nuestro archivo de Python. Y esto es solo algo para memorizar. Si _ _ name _ _ == "_ _ main _ _": y luego tabulamos en main (). Esto es una de esas cosas que no necesariamente tienes que usar porque escribes tu código de tal manera que la primera línea es lo primero que quieres que suceda, de todas maneras va a estar bien. Pero si lo escribes fuera de orden, esto es solo una de esas cosas que tienes que memorizar. Lo cual define una función, bastante sencillo. Vamos a definir el cuadrado de x como acabamos de hacer hace un segundo en C. Def cuadrado de paréntesis x: regresa x por x. Bastante sencillo. También podría hacer esto. Podría regresar x por dos veces. Bueno, en realidad este operador aquí es un incorporado, que no teníamos, el operador de exponenciación. Entonces, esto es regresar x al cuadrado. También podría ser muy complicado y escribir mi función cuadrada sumando x consigo mismo x veces. En realidad no importa. Siempre y cuando el resultado sea el mismo, puede ser una caja negra como hablamos en el video de la función out. No necesariamente nos importa cómo se define la función cuadrada, siempre y cuando haga lo que esperamos que haga. Siempre y cuando imprimir el cuadrado de 5 imprima 25.