Muy bien, hablemos de los argumentos de línea de comandos. Hasta ahora en el curso, probablemente todos sus programas han comenzado como int main void. Hemos estado recolectando la entrada del usuario si la necesitamos en nuestros programas, como en el programa Mario, por ejemplo, a través de mensajes dentro del programa. No hemos necesitado modificar la declaración de main, porque dentro de main decimos, pueden llamarlo para obtener int. ¿Qué tan grande quiere que sea la pirámide? O pueden llamarlo para obtener un flotante, ¿cuánto cambio debo mostrar al usuario?

Sin embargo, hay otra forma y si queremos que nuestros usuarios puedan proporcionar datos a nuestro programa en tiempo de ejecución en lugar de mientras se está ejecutando el programa,en sutileza de diferencia, pero a veces muy útil, necesitamos una nueva forma de declarar main. No podemos usar int main void si queremos recolectar otros datos en la línea de comandos cuando el usuario ejecuta el programa: de ahí los argumentos de línea de comandos.

Para recolectar estos argumentos de línea de comandos del usuario, cambie su declaración de main para que parezca así: int main, paréntesis abierto, int argc, coma, string argv, corchetes cuadrados, y luego llave abierta. Entonces, ¿qué significa ya? Bueno, estamos pasando dos parámetros o argumentos o entradas a main. Uno, un número entero llamado argc y el otro ¿qué es? Es una matriz de cadenas, ¿verdad? Vemos esa notación de corchetes cuadrados. Es una matriz de cadenas. No es una cadena individual, es una matriz de cadenas. Y estos dos argumentos, argc y argv, le permiten saber qué datos ha proporcionado el usuario en la línea de comandos y cuántas cosas ha proporcionado en la línea de comandos. Cosas bastante útiles con las que trabajar.

Argc significa conteo de argumentos y debe saber, por cierto, que puede llamar argc como quiera. Puede llamar argv como quiera. Estos son solo nombres convencionales que usamos para ellos: conteo de argumentos y, como veremos en un segundo, vector de argumentos, argv. Pero no tiene que llamarlos argc y argv si no quiere, pero convencionalmente, eso es lo que hacemos.

De todos modos, argc, el conteo de argumentos. Es una variable de tipo entero y, como puede esperar, si tenemos dos cosas que vamos a descubrir qué se escribieron y cuántas cosas escribió el usuario, argc nos dirá cuántas cosas escribió el usuario. Entonces le da un número de argumentos de línea de comandos que el usuario escribió cuando se ejecutó el programa. Entonces, si su programa se ejecuta como ./greedy, y dentro de su programa greedy, su función main tiene la declaración int main int argc, cadena de caracteres argv corchetes cuadrados, entonces argc en ese caso es uno. Ahora, observe que no contamos cuántas cosas escribió el usuario después del nombre del programa. El nombre del programa en sí cuenta como un argumento de línea de comandos.

Por lo tanto, con ./greedy, en ese caso, argc es uno. Si el usuario escribe /greedy 1024 CS50 en la línea de comandos, argc en ese caso sería tres. Y sabemos esto porque la forma en que se detecta la división entre las cadenas es mediante un espacio o una pestaña o algo así entre ellas. Entonces, cualquier cantidad de espacio en blanco, como se llama, entre los valores escritos en la línea de comandos indica cuántos hay. Entonces, con ./greedy espacio 1024 espacio CS50, argc en ese caso es tres.

Argv es el vector de argumentos. Vector, por cierto, es solo otra palabra para una matriz, y esta es una matriz que almacena cadenas. Una cadena por elemento, que son las cadenas que el usuario escribió en la línea de comandos cuando se ejecutó el programa. Ahora, como es el caso con cualquier matriz, si recuerda nuestra discusión anterior sobre matrices, el primer elemento de argv siempre se encontrará en argv corchetes cuadrados cero. Ese es el primer índice de la matriz argv. Entonces, y de hecho, siempre será el nombre del programa, siempre se ubicará en argv corchetes cuadrados cero.

El último elemento de argv siempre se encuentra en argv corchetes cuadrados argc menos uno. ¿Ves por qué? ¿Recuerdas cuántos elementos existen en esta matriz? Sabemos que es argc número de elementos. Si el usuario escribe tres cosas en la línea de comandos, argc es tres. Pero debido a que en C, cuando trabajamos con matrices, cada elemento de la matriz, o más bien los índices de la matriz, comienzan en cero. Si tenemos tres elementos en nuestra matriz, tenemos un elemento en argv cero, un elemento en argv uno y un elemento en argv dos. No hay un elemento en argv tres y una matriz de tamaño tres. Entonces, por eso, siempre se puede encontrar el último elemento de argv en argv corchetes argc menos uno.

Entonces, supongamos que el usuario ejecuta el programa greedy de la siguiente manera: si escribe en la línea de comandos ./greedy espacio 1024 espacio CS50, y por alguna razón ya hemos preparado nuestro programa greedy para conocer y trabajar con estos argumentos de línea de comandos. No lo hicimos anteriormente cuando trabajamos para el problema ambicioso, pero supongamos que ahora lo hemos modificado para que procesemos los argumentos de línea de comandos de alguna manera. En este caso, argv cero es ./greedy. ¿Qué es argv uno? Bueno, es 1024, ¿verdad? Es 1024, pero aquí hay una distinción realmente importante: ¿recuerda el tipo de datos de argv?

Almacena cadenas, ¿verdad? Pero parece que 1024 es un valor entero. Esta es una distinción realmente importante y, de hecho, se convertirá en algo con lo que se encontrará en problemas futuros. Todo en argv se almacena como una cadena. Los contenidos de argv uno son la cadena uno, cero, dos, cuatro, que consta de esas cuatro letras o caracteres. Es como si el usuario hubiera escrito uno, cero, dos, cuatro como letras o caracteres individuales. No es el entero 1024, por lo que no se puede trabajar directamente con él diciendo int 1000 o int x equals argv uno menos 24.

De manera intuitiva, podríamos pensar que es 1,024 menos 24, por lo que x es igual a 1,000. Pero de hecho, ese no es el caso porque argv uno es una cadena. La cadena 1024. Ahora hay una función que se puede usar para convertir cadenas a enteros. No se lo desvelaremos ahora, pero estoy seguro de que Zamyla estará encantado de contárselo en el tutorial de un problema futuro. Pero también puedes encontrar funciones que hagan esta conversión en la referencia 50. En el futuro, Zamyla estará feliz de decirle cuál es la función que convertirá la cadena 1024 al entero 1024.

Bueno, adelantando. Hemos cubierto nuestro argv cero, hemos cubierto argv uno. ¿Qué hay en argv dos? CS50. Ese es probablemente bastante autoexplicativo. ¿Qué hay en argv tres? Bueno, de nuevo, realmente no lo sabemos, ¿verdad? Tenemos una matriz de tamaño tres, eso es cuántos elementos escribió el usuario en la línea de comandos, así que si vamos a argv tres, ahora estamos superando los límites de nuestra matriz. El compilador nos permitirá hacer esto, no hay problema intuitivo con eso, pero en términos de lo que realmente sucederá, no lo sabemos realmente. Depende de lo que se encuentre en la memoria donde se esperaría que estuviera argv tres. Y así podríamos salirnos sin sufrir ningún problema. Lo más probable es que, particularmente cuando trabajamos con argv en lugar de cualquier otra matriz que está en nuestro programa, suframos una falla de segmentación. Así que, de nuevo, asegúrese de no exceder los límites de sus matrices, especialmente argv, dada su alta importancia en sus programas.

Soy Doug Lloyd. Esto es CS50.