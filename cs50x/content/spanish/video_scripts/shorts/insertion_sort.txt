Entonces, en este video, vamos a echar un vistazo al ordenamiento por inserción, que es otro algoritmo que se puede usar para ordenar una matriz. En este ejemplo, vamos a usar una matriz de enteros. Un algoritmo, recordemos, es un conjunto de instrucciones paso a paso para completar una tarea. La idea del ordenamiento por inserción es la siguiente: vamos a construir la matriz ordenada en su lugar, moviendo los elementos que consideramos previamente ordenados, si es necesario, para encajar esos elementos en la posición correcta en la parte ordenada de la matriz. Esto es fundamentalmente diferente de cómo se hacen las cosas con el ordenamiento por selección o el ordenamiento por burbuja. Recordemos que con esos algoritmos, normalmente terminamos ordenando un elemento. Tenemos que recorrer toda la matriz para poner un elemento en la posición correcta. Para el ordenamiento por burbuja, suele ser el elemento más grande disponible. Para el ordenamiento por selección, suele ser el elemento más pequeño. Pero solo obtenemos uno a la vez. No hacemos -- tenemos que recorrer esta matriz varias veces. Con el ordenamiento por inserción, solo avanzamos una vez a través de la matriz. Es posible que tengamos que mirar hacia atrás en las cosas que ya hemos ordenado para moverlas y hacer espacio, pero solo tenemos que hacer un pase hacia adelante de toda la matriz. Esa es una diferencia fundamental. Y la forma en que hacemos esto es empezando, simplemente decimos que la primera cosa que vemos está ordenada. Es la única cosa que hemos visto hasta ahora. Así que podría estar ordenado. Luego hacemos lo siguiente para cada elemento que queda. Miramos ese elemento y tal vez movemos cosas que consideramos previamente ordenadas, solo para hacer espacio para él, hasta que lleguemos a cada elemento. Esto probablemente tendrá más sentido cuando lo veas visualmente. Así que ilustremos esto ahora con esta matriz. En esta matriz, lo que quiero hacer es que todo lo que es rojo no está ordenado, todo lo que es azul está ordenado. Así que tenlo en cuenta mientras vamos por este ejemplo. Recordemos que lo primero que hacemos es declarar que el primer elemento de la matriz está ordenado. Así que es el número 5. Lo vemos. Lo conseguimos. Este está ordenado. Así que tenemos la parte ordenada en azul. Y esta parte roja de cinco elementos no está ordenada. Ahora vamos a repetir el siguiente proceso hasta que todo lo demás esté ordenado. Miramos el siguiente elemento no ordenado y tal vez movemos cosas en la sección azul para poner ese elemento en la posición ordenada correcta. Así que el primer elemento que vemos es el 2. Miramos, ¿hay algo que tengamos que hacer para poner el 2 en el lugar correcto? La respuesta es sí. Tenemos que mover el 5 para poner el 2 delante de él. Así que deslizamos el 5 y luego ponemos el 2 donde estaba el 5 básicamente en memoria. Y ahora el 2 y el 5 están ordenados y la porción roja no está ordenada. Repitamos este proceso de nuevo. Lo siguiente que vemos es un 1. Miramos la parte azul. ¿Qué tenemos que mover? Bueno, aquí, otra vez, tenemos que mover todo, porque el 1 viene antes tanto del 2 como del 5. Así que ambos se deslizan, y eso deja una vacante para poner el 1. Lo siguiente que vemos es un 3. ¿Qué tenemos que mover esta vez para obtener todo en posición? Bueno, no es todo esta vez. Solo tenemos que mover el 5. Así que movemos el 5 a donde estaba el 3. Y luego ponemos el 3 donde acaba de vaciar el 5. El siguiente elemento que vemos es un 6. Y este es un caso especial del ordenamiento por inserción, donde es más grande que todo en la porción ordenada, lo cual es genial porque así no tenemos que mover nada en absoluto. Solo decimos, bien, 6 está en el lugar correcto. Podemos declarar que 6 está ordenado. Y luego el último elemento que tenemos aquí es el 4. Así que echamos un vistazo a eso. Miramos hacia atrás en la sección azul, la sección ordenada de la matriz. Descubrimos lo que necesitamos deslizar. Son solo el 5 y el 6. Se deslizan, lo que deja espacio para el 4. Y ahora hemos ordenado toda nuestra matriz de seis elementos mediante el algoritmo de ordenamiento por inserción. De nuevo, esto se siente muy diferente a cualquier cosa que hayamos visto antes. Pero desafortunadamente sigue siendo un algoritmo de n cuadrado. Por ejemplo, imagina si la matriz está en orden inverso. Así que es 6, 5, 4, 3, 2, 1. En ese caso, tenemos que mover cada uno de los elementos n posiciones cada vez que queremos hacer una inserción. Así que vemos esta matriz de seis, cinco, cuatro, tres, dos, uno. El seis está bien. Luego vemos el cinco. Tenemos que desplazar el seis. Luego vemos el cuatro. Tenemos que desplazar seis y cinco. Luego vemos el tres. Tenemos que desplazar seis y cinco y cuatro. Así que seguimos empeorando. Tenemos que seguir haciendo todos estos desplazamientos. Y cada uno de ellos nos cuesta. Así que aunque esto parece y se siente muy diferente de un ordenamiento por burbuja o un ordenamiento por selección, desafortunadamente sigue siendo n cuadrado. En el mejor escenario, la matriz está perfectamente ordenada. Y este es un poco el ejemplo que vimos hace un segundo con el 5 y el 6, donde simplemente dijimos, oh, eso es conveniente. El 6 es más grande que todo en la sección ordenada, así que simplemente movimos la línea. Simplemente lo cambiamos de rojo a azul sin cambiar nada. En el mejor escenario, hacemos eso para cada elemento. Uno, dos, tres, cuatro. Solo seguimos cambiándolos de rojo a azul, sin shift. Y así que si pensamos en esto en notación asintótica, eso significa que este algoritmo es un big O de n cuadrado, pero todavía es un omega de n. Soy Doug Lloyd. Esto es CS50."