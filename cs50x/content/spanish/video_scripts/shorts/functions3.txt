Hemos declarado una función, eso es genial. Le hemos dicho al compilador qué es lo que vamos a hacer. Ahora, vamos a escribir esa función. Vamos a darle una definición, de manera que dentro de la caja negra suceda un comportamiento previsible. De hecho, vamos a multiplicar dos números reales juntos, o sumar números juntos, o hacer lo que sea que hayamos pedido a nuestra función que haga. 

Así que, de hecho, tratemos de definir una multiplicación de dos números reales de la cual acabamos de hablar hace un segundo. Ahora, el comienzo de la definición de la función se ve casi exactamente igual a la declaración de la función. Tengo ambos aquí. En la parte superior está la declaración de la función: tipo, nombre, lista de argumentos separados por comas, punto y coma. El punto y coma indica que esa es una declaración de la función. El comienzo de la definición de la función se ve casi exactamente igual: tipo, nombre, lista de argumentos separados por comas, sin punto y coma, llave abierta. La llave abierta, así como lo hemos estado haciendo con main, significa que ahora estamos comenzando a definir lo que sucede dentro de la caja negra que hemos decidido llamar "mult dos reales". Aquí hay una forma de implementarlo. Podríamos declarar una nueva variable de tipo float llamada "product" y asignar esa variable a "x times y". Luego, devolver "product". ¿Qué significa "devolver" aquí? Bueno, "devolver" es la forma en que indicamos que así es como estamos pasando la salida hacia afuera. Entonces, "devolver algo" es lo mismo que decir "esta es la salida de la caja negra". Así es como se hace. Aquí hay otra forma de implementarlo. Podríamos simplemente devolver "x times y". X es un float. Y es un float. Por lo tanto, "x times y" también es un float. Ni siquiera necesitamos crear otra variable. Así que esa es una forma diferente de implementar la misma caja negra. 

Ahora, tome un momento, detenga el video de nuevo, e intente definir la función "add dos ints", que es la otra función que hablamos hace un momento. De nuevo, he puesto la declaración de la función, el punto y coma, una llave abierta y una llave cerrada para indicar dónde llenaremos el contenido de "add dos ints", de manera que definamos el comportamiento particular dentro de la caja negra. Así que pause el vídeo. Tome todo el tiempo que necesite para tratar de definir una implementación de "add two ints", de manera que cuando la función genere un valor, en realidad devuelva la suma de las dos entradas. Así como el ejemplo anterior, hay varias formas diferentes en las que podría implementar "add dos ints". Aquí hay uno. Aquí en naranja he agregado algunos comentarios para indicar lo que está sucediendo en cada línea de código. Declaro una variable llamada "sum" de tipo int. Digo que "sum" es igual a "a plus b". Ahí es donde estamos haciendo realmente el trabajo de sumar "a" y "b" juntos. Y devuelvo "sum". Eso tiene sentido porque "sum" es una variable de tipo entero. ¿Cuál es el tipo de datos que esta función me dice que va a producir? Entero. Así que estoy devolviendo "sum", que es una variable entera. Y eso tiene sentido dado lo que hemos declarado y definido que nuestra función haga. 

Ahora también puede definir la función de esta manera, "int sum equals a plus b"-- salte ese primer paso-- y luego devuelva "sum". Ahora también podría haberlo implementado de esta manera, lo cual no recomiendo en absoluto. Es un mal estilo y un diseño realmente malo, pero sí funciona. Si toma este código, que es "int add bad adder punto c" y lo usa, en realidad suma dos enteros. Es una implementación muy pobre de este comportamiento en particular. Pero funciona. Solo está aquí para ilustrar el punto de que realmente no nos importa lo que sucede dentro de la caja negra, siempre y cuando tenga la salida que esperamos. Esta es una caja negra mal diseñada. Pero al final del día, sigue produciendo la suma de "a plus b". Bien.