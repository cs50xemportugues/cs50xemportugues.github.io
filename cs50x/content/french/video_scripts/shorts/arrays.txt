D'accord, travailler avec des variables uniques est assez amusant. Mais que faire si nous voulons travailler avec beaucoup de variables sans avoir plusieurs noms différents dans notre code? Dans ce cas, les tableaux seront vraiment utiles. Les tableaux sont une structure de données fondamentale pour n'importe quel langage de programmation que vous utiliserez. Et ils sont vraiment, vraiment utiles, en particulier, comme nous le verrons, dans CS 50.

Nous utilisons des tableaux pour contenir des valeurs du même type de données à des emplacements de mémoire contigus. Autrement dit, c'est une façon de regrouper un tas d'entiers ensemble en mémoire ou un tas de caractères ou de flottants en mémoire très proches les uns des autres et de travailler avec eux sans avoir à donner à chacun un nom unique, ce qui peut devenir fastidieux après un certain temps.

Une façon d'analoguer les tableaux est de penser à votre bureau de poste local pendant une seconde. Donc, éloignez-vous de la programmation et fermez simplement les yeux et visualisez dans votre esprit votre bureau de poste local. Habituellement, dans la plupart des bureaux de poste, il y a une grande banque de boîtes aux lettres sur le mur.

Un tableau est un bloc géant de mémoire contiguë, de la même manière qu'une banque de la poste dans votre bureau de poste est un grand espace sur le mur du bureau de poste. Les tableaux ont été divisés en petits blocs d'espace identiques de même taille, appelés éléments, de la même manière que le mur du bureau de poste a été divisé en petits blocs d'espace de même taille, que nous appelons une boîte aux lettres. Chaque élément du tableau peut stocker une certaine quantité de données, tout comme chaque boîte aux lettres de la poste peut contenir une certaine quantité de courrier.

Ce qui peut être stocké dans chaque élément du tableau est des variables du même type de données, comme int ou char, tout comme dans votre boîte aux lettres de poste, vous ne pouvez entrer que des choses d'un type similaire, telles que des lettres ou de petits colis. Enfin, nous pouvons accéder à chaque élément du tableau directement par numéro d'indice, tout comme nous pouvons accéder à notre boîte aux lettres en connaissant son numéro de boîte aux lettres. Espérons que cette analogie vous aidera à comprendre l'idée des tableaux en analoguant quelque chose d'autre que vous connaissez probablement déjà.

En C, les éléments d'un tableau sont indexés à partir de 0, pas à partir de 1. Et c'est vraiment important. Et en fait, c'est pourquoi nous, dans CS 50, et pourquoi les informaticiens comptent fréquemment à partir de 0, c'est en raison de l'indexation des tableaux de C, qui commence toujours à 0. Donc, si un tableau est composé de n éléments, le premier élément de ce tableau est situé à l'indice 0, et le dernier élément du tableau est situé à l'indice n-1. Encore une fois, s'il y a n éléments dans notre tableau, le dernier indice est n-1.

Donc, si notre tableau a 50 éléments, le premier élément est situé à l'indice 0, et le dernier élément est situé à l'indice 49. Malheureusement ou heureusement, selon votre point de vue, C est très indulgent ici. Il ne vous empêchera pas de sortir des limites de votre tableau. Vous pourriez accéder à l'élément -3 de votre tableau ou à l'élément