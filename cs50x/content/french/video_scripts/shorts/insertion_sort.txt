Dans cette vidéo, nous allons examiné le tri par insertion, qui est un autre algorithme que vous pouvez utiliser pour trier un tableau. Et dans cet exemple, nous allons utiliser un tableau d'entiers. Un algorithme est une série d'instructions étape par étape pour accomplir une tâche. L'idée avec le tri par insertion est de construire le tableau trié sur place, en déplaçant les éléments qui ont été précédemment considérés comme triés, si nécessaire, afin de placer ces éléments à la bonne position dans la partie triée du tableau. Cela est fondamentalement différent de ce que nous avons fait avec le tri par sélection ou le tri à bulles. Rappelez-vous que avec ces algorithmes, nous finissons généralement par trier un élément. Nous devons parcourir tout le tableau pour mettre un élément à la bonne position. Pour le tri à bulles, c'est généralement le plus grand élément disponible. Pour le tri par sélection, c'est généralement le plus petit élément. Mais nous n'en obtenons qu'un à la fois. Nous devons parcourir ce tableau plusieurs fois. Avec le tri par insertion, nous n'allons avancer dans le tableau qu'une seule fois. Nous devons peut-être regarder en arrière les choses que nous avons déjà triées pour les déplacer et faire de la place, mais nous ne devons faire qu'un seul passage vers l'avant de tout le tableau. C'est donc une différence fondamentale. Et nous faisons cela en commençant simplement, nous disons que la première chose que nous voyons est triée. C'est la seule chose que nous avons vue jusqu'à présent. Autant donc la considérer comme triée. Ensuite, nous faisons simplement la chose suivante pour chaque élément qui reste. Nous examinons cet élément et nous déplaçons peut-être des choses que nous avons déjà considérées comme triées, juste pour faire de la place pour celui-ci, jusqu'à ce que nous traversions chaque élément. Cela sera probablement un peu plus clair lorsque vous le verrez visuellement. Donc, illustrons cela maintenant avec ce tableau. Dans ce tableau, tout ce qui est en rouge est non trié, tout ce qui est en bleu est trié. Gardez cela à l'esprit lorsque nous parcourons cet exemple. Rappelez-vous que la première chose que nous faisons est de déclarer que le premier élément du tableau est trié. Donc, c'est cinq. Nous le voyons, nous disons « d'accord, celui-ci est trié ». Nous avons donc la partie triée en bleu, et la partie non triée en rouge. Maintenant, nous allons répéter le processus suivant jusqu'à ce que tout le reste soit trié. Nous examinons le prochain élément non trié et nous déplaçons peut-être des choses dans la section bleue pour mettre cet élément à la position triée correcte. Donc, le premier élément que nous voyons est deux. Nous regardons, nous voyons s'il y a quelque chose à faire pour mettre deux dans le bon endroit. La réponse est oui. Nous devons déplacer cinq pour mettre deux devant. Nous décalons donc cinq et plaçons deux à l'endroit où était cinq en mémoire. Et maintenant deux, cinq est trié et la partie rouge est non triée. Répétons ce processus à nouveau. La prochaine chose que nous voyons est un un. Nous examinons la partie bleue. Que devons-nous déplacer? Eh bien ici, encore une fois, nous devons tout déplacer, car un vient avant deux et cinq. Nous les faisons donc tous glisser. Et cela laisse une place pour mettre un. La prochaine chose que nous voyons est trois. Que devons-nous déplacer cette fois pour tout mettre en position? Eh bien, ce n'est pas tout cette fois. Nous devons juste déplacer cinq. Nous déplaçons donc cinq où se trouvait trois. Et nous mettons trois là où le cinq vient de se libérer. Le prochain élément que nous voyons est 6. Et c'est une sorte de cas spécial de tri par insertion, où il est plus grand que tout ce qui est dans la partie triée, ce qui est génial car alors nous n'avons rien à déplacer du tout. Nous disons juste : « Très bien, six est dans le bon endroit. Nous pouvons simplement le considérer comme trié. » Et le dernier élément que nous avons ici est quatre. Nous examinons cela. Nous regardons en arrière la partie bleue, la partie triée du tableau. Nous déterminons ce que nous devons déplacer. C'est juste le cinq et le six. Ils se déplacent, ce qui laisse de la place pour le quatre. Et maintenant, nous avons trié notre tableau de six éléments en utilisant l'algorithme de tri par insertion. Maintenant, cela semble très différent de tout ce que nous avons vu auparavant. Mais malheureusement, cela reste un algorithme de n carré. Par exemple, imaginez si le tableau était dans l'ordre inverse. Donc, six, cinq, quatre, trois, deux, un. Dans ce cas, nous devons déplacer chacun des éléments de n positions chaque fois que nous voulons effectuer une insertion. Nous voyons donc ce tableau de six, cinq, quatre, trois, deux, un. Le six est bon. Puis nous voyons le cinq. Nous devons déplacer le six. Puis nous voyons le quatre. Nous devons déplacer six et cinq. Nous voyons ensuite le trois. Nous devons déplacer six, cinq et quatre. Nous devons donc continuer à tout déplacer, cela nous coûte donc plus cher. Bien que cela semble et soit différent d'un tri à bulles ou d'un tri par sélection, cela reste malheureusement un n carré. Dans le meilleur des cas, le tableau est parfaitement trié. Et c'est un peu cet exemple que nous avons vu tout à l'heure avec cinq et six, où nous avons simplement dit : « Oh, c'est pratique. Le six est plus grand que tout dans la partie triée, donc nous avons simplement déplacé la ligne. Nous avons changé du rouge au bleu sans rien changer. » Dans le meilleur des cas, nous faisons cela pour chaque élément - un, deux, trois, quatre. Nous continuons simplement à changer de couleur de rouge à bleu, aucun déplacement. Et donc, si nous réfléchissons à cela en notation asymptotique, cela signifie que cet algorithme est un grand O de n carré, mais c'est toujours oméga de n.

Je suis Doug Lloyd. Ceci est CS50.