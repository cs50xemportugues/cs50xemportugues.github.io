Bonjour, parlons des opérateurs en C. Nous avons déjà vu un opérateur, en fait, le signe égal qui est l'opérateur d'attribution. Il nous permet de mettre une valeur dans une variable, c'est le signe égal simple. Pour manipuler les valeurs et les variables en C, nous avons plusieurs opérateurs à notre disposition que nous pouvons utiliser. Commençons par les opérateurs arithmétiques qui permettent les opérations mathématiques de base en C. Nous pouvons additionner, soustraire, multiplier et diviser les nombres avec les symboles +, -, *, et /. Par exemple int x = y + 1. Supposons qu'auparavant nous avons dit int y = 10. Quelle est la valeur de x après l'exécution de cette première ligne de code ? C'est 11. Pourquoi ? y était 10. Je dis donc que int x = 10 + 1. 10 + 1 est 11. La valeur 11 est stockée dans la variable x. Pas trop difficile, non ? 

Et cette ligne de code ? x = x * 5. Avant l'exécution de cette ligne de code, x était 11. Quelle est la valeur de x après l'exécution de cette ligne de code ? x = 55. Lorsque nous utilisons l'opérateur d'attribution, la valeur de droite est assignée à la valeur de gauche. D'abord, nous évaluons x * 5. 11 * 5 est 55. Ensuite, nous stockons cette valeur dans x. Le 11 qui était là avant est maintenant remplacé. 

Il y a un troisième opérateur que vous n'avez probablement pas entendu parler, mais que vous avez certainement utilisé dans le passé, c'est l'opérateur modulo. Il vous donne le reste lorsque vous divisez deux nombres ensemble. Par exemple, si je dis 13 divisé par 4, quel est le reste ? Cette valeur serait calculée par l'opérateur modulo. Dans int m = 13 mod 4, j'ai ajouté un commentaire disant que la valeur de m est maintenant 1. Pourquoi ? Dans notre tête, nous faisons la division, 4 divisé par 13. 4 va dans 13 trois fois avec un reste de 1. L'opérateur modulo nous donne simplement le reste de la division. Vous pourriez penser que ce n'est pas particulièrement utile, mais à quel point cet opérateur est fréquemment utilisé dans la pratique pour générer un nombre aléatoire ou pour obtenir un résultat significatif lorsqu'on travaille avec des nombres vraiment grands.

C permet également d'appliquer un opérateur arithmétique à une variable unique de manière plus simplifiée. Par exemple, au lieu d'écrire « x = x * 5 », nous pouvons écrire « x * = 5 ». Et nous pouvons également utiliser des opérateurs comme +, -, * et / en lieu et place de *. Nous avons également une notation encore plus courte pour l'incrementation et la décrementation d'une variable de 1, c'est x + +, x = x + 1 ou x + = 1.

Passons maintenant aux expressions booléennes. Contrairement aux opérateurs arithmétiques, les expressions booléennes sont utilisées pour comparer des valeurs. Toutes les expressions booléennes en C se résument à l'une des deux valeurs possibles : Vrai ou Faux. On peut utiliser les résultats dans une déclaration conditionnelle, une boucle ou une comparaison de valeurs. Dans les comparaisons, nous utiliserons souvent la variable de type Boolan pour nos expressions. Cependant, nous n'avons pas toujours besoin de le faire. Par exemple, en C, toute valeur non nulle est considérée comme Vrai, et 0 est considérée comme Faux. 

Il y a deux types principaux d'expressions booléennes : les opérateurs logiques et les opérateurs de comparaison. Le ET logique est vrai si et seulement si les deux opérandes sont vrais. Sinon, il est faux. Le OU logique est vrai si au moins un opérande est vrai. Sinon, il est faux. L'opérateur NON inverse simplement la valeur de l'opérand