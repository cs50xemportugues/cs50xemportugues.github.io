D'accord. Maintenant, parlons de quelque chose de très utile en programmation : les instructions conditionnelles. Les expressions conditionnelles permettent à vos programmes de prendre des décisions et de prendre différentes branches en fonction des valeurs de variables ou de ce que l'utilisateur saisit à partir de la ligne de commande ou d'une invite. En C, il existe plusieurs façons d'exprimer des expressions conditionnelles, que nous appelons parfois une branche conditionnelle dans vos programmes. Certains d'entre eux vous seront familiers depuis Scratch, nous allons donc les appeler côte à côte pour que vous puissiez faire une analogie mentale. 

if - if est une condition assez simple. Si vous vous souvenez de Scratch, vous pouviez remplir ce hexagone avec une expression bleue si une souris est enfoncée ou si x est inférieur à 10. Ensuite, si x était inférieur à 10, ou si la souris était enfoncée, tout le code à l'intérieur de cette pièce de puzzle s'exécutait. Toutes les choses qui correspondent à cette forme de C.

De même, avons-nous ici un if à gauche. Si une expression booléenne, que j'utilise simplement comme substitut pour l'une des expressions booléennes que nous avons précédemment discutées, accolade ouverte, accolade fermée. Si l'expression booléenne de l'instruction if est vraie, alors toutes les lignes de code situées entre les accolades s'exécuteront dans l'ordre de haut en bas. Si l'expression booléenne est fausse, nous passerons sur tout ce qui se trouve entre les accolades, car nous ne voulons aller dans cette branche que si l'expression booléenne est vraie.

Nous pouvons aller encore plus loin avec if else. Ce bloc Scratch est assez similaire à celui que nous avons vu il y a quelques instants, sauf qu'il prend deux chemins différents en fonction de ce qui se passe. Donc, si la souris est enfoncée ou si x est inférieur à 10, nous ferons tout ce qui se trouve entre cette première fourche. Sinon, si la souris est en haut ou si x n'est pas inférieur à 10, nous ferons tout ce qui se trouve entre les deuxièmes. Et c'est analogue à ce que vous voyez ici pour C. Si expression booléenne, faites les choses entre le premier ensemble d'accolades. Sinon, faites les choses entre le deuxième ensemble d'accolades. Donc, si l'expression booléenne est vraie, nous ferons tout ce qui se trouve entre le premier ensemble. Si l'expression booléenne est fausse, cela déclencherait le else, et nous ferions tout ce qui se trouve entre le deuxième ensemble d'accolades. Encore une fois, de haut en bas, toutes les lignes entre les accolades.

En C, il est possible de créer une chaîne if-else if-else. En fait, on peut avoir if-else if-else if-else, etc. En Scratch, cela nécessitait l'imbrication des blocs. Vous ajoutez un if-else, et vous deviez en ajouter un autre à l'intérieur d'autre, et ainsi de suite, ce qui était assez compliqué. Mais en C, nous n'avons pas besoin de le faire. Nous pouvons en fait avoir une chaîne de cette manière. Encore une fois, comme vous pouvez vous y attendre, toutes ces branches sont mutuellement exclusives. Vous ne pouvez jamais descendre dans plus d'un branchement. Si ceci est vrai sinon, si cela est vrai sinon cela est vrai, sinon faites cela. Ainsi, les quatre branches de cet exemple sont mutuellement exclusives. Il s'agit d'une chaîne if-else if-else.

Il est cependant possible, et parfois très utile, de créer une chaîne de branches qui ne sont pas mutuellement exclusives. Dans cet exemple, seules les troisième et quatrième branches sont mutuellement exclusives. Il se peut que vous puissiez satisfaire la première condition, la deuxième et la troisième condition - dans ce cas, vous descendriez dans la première branche, puis dans la deuxième, puis dans la troisième. Ou peut-être que vous satisfaites la première condition et la deuxième condition, mais vous ne satisfaites pas la troisième condition. Dans ce cas, vous descendriez dans la première et la deuxième branche, puis dans la quatrième.

La raison en est que le else ne se rapportera qu'au if le plus proche. Même s'il y a un else ici, cela ne crée pas nécessairement une chaîne mutuellement exclusive de tout. Ce n'est que l'expression booléenne avec l'expression booléenne 3 - qui est mutuellement exclusive avec le else. Il est donc possible, et parfois très utile, comme je l'ai dit, de créer une chaîne de branches qui ne sont pas mutuellement exclusives. 

Jetons un coup d'œil à un autre type de conditionnel, que vous n'avez pas vu dans Scratch. Il y a quelque chose appelé l'instruction switch. L'instruction switch est assez intéressante car c'est une instruction conditionnelle qui vous permet de spécifier des cas distincts au lieu de vous fier aux expressions booléennes pour prendre des décisions. 

Par exemple, supposons que j'ai ce programme et que je demande à l'utilisateur de me fournir une entrée. Donc, je dis int x = GetInt(), et si vous n'êtes pas encore familier, get int est une fonction qui est également incluse dans la bibliothèque CS50, alors si vous incluez CS50.H vous aurez accès à GetInt() et à tous ses cousins - GetFloat, GetString, etc. Basicament, une fonction Get pour chaque type de données que nous avons déjà discutées. Donc, int x égale GetInt, fondamentalement ce qui se passe, c'est que je suis au terminal. Je demande à l'utilisateur de taper un nombre.

Et ici, je bascule ce que je fais en fonction de ce que l'utilisateur a tapé à l'invite. Donc, s'ils ont tapé un, j'imprime un. Et ensuite, je break. S'ils ont tapé deux, j'imprime deux. Et ensuite, je break. Il est important de mettre un break entre chaque cas sinon vous passerez outre. Donc, si je n'avais pas de breaks là-bas, et que l'utilisateur tapait un, ce qui se passerait, c'est qu'il imprimerait un, deux, trois, désolé. C'est assez étrange, non ? Vous pourriez le penser. Mais il y a en fait des cas où cela pourrait être une chose assez utile. Voici un autre exemple d'une instruction switch où j'omets les breaks. Mais je le fais exprès.

Que se passe-t-il ici? Pensez-y pendant une seconde. Vous voudrez peut-être même mettre en pause la vidéo.

Que se passe-t-il ici si l'utilisateur tape quatre ? Je demande à l'utilisateur une entrée. Et il fournit la valeur 4. Qu'est-ce qui est imprimé lorsque je fais cela ? Dans la diapositive précédente, il y avait un break entre tous les cas. Et donc cela ne ferait qu'imprimer quatre et arrêter. Mais dans ce cas, cela ne se produira pas. Ce qui se passera, c'est que vous passerez par tous les cas.

Dans ce cas, j'ai organisé mes cas de manière à ce que si l'utilisateur tape 4, j'imprimerai 4, 3, 2, 1, feu. Et s'ils ont tapé 5, je commencerais à cinq et je ferais la même chose. S'ils ont tapé 1, je ferais juste un feu.

Donc, dans ce cas, j'utilise un switch de manière astucieuse pour que je prévoie de passer par tous les cas. Mais en général, vous voudrez probablement mettre un break entre chacun d'entre eux, à moins que vous n'ayez une situation comme celle-ci où vous utilisez le fait que vous passerez à travers les cas sans pause. C'est donc le deuxième des principaux types d'instructions conditionnelles. Le dernier d'entre eux est ?: Donc, j'ai deux extraits de code C ici. L'un à gauche et l'autre à dro