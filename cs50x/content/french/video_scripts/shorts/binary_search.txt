D'accord. Donc, la recherche binaire est un algorithme que l'on peut utiliser pour rechercher un élément dans un tableau. Contrairement à la recherche linéaire, cela nécessite une condition spéciale à remplir au préalable, mais c'est tellement plus efficace si cette condition est remplie. 

Alors, quelle est l'idée ici? C'est diviser et conquérir. Nous voulons réduire la taille de la zone de recherche de moitié à chaque fois afin de trouver un nombre cible. C'est là que cette condition entre en jeu. Nous ne pouvons exploiter le pouvoir d'éliminer la moitié des éléments sans même les regarder que si le tableau est trié. 

S'il est bien mélangé, nous ne pouvons pas simplement mettre de côté la moitié des éléments, car nous ne savons pas ce que nous mettons de côté. Mais si le tableau est trié, nous pouvons le faire, car nous savons que tout ce qui se trouve à gauche de la position actuelle doit être inférieur à la valeur à laquelle nous sommes actuellement. Et tout ce qui se trouve à droite de cette position doit être supérieur à la valeur que nous cherchons actuellement. 

Pour la recherche binaire, quelles sont les étapes du pseudocode? Nous répétons ce processus jusqu'à ce que le tableau ou, au fur et à mesure, les sous-tableaux, des morceaux plus petits du tableau original, ait une taille de 0. Nous calculons le milieu du sous-tableau courant. 

Si la valeur que vous recherchez se trouve dans cet élément du tableau, arrêtez-vous. Vous l'avez trouvé. C'est génial. Sinon, si la cible est inférieure à ce qui se trouve au milieu, donc si la valeur que nous cherchons est inférieure à ce que nous voyons, répétez ce processus à nouveau, mais changez le point final, au lieu d'être le tableau complet, pour être juste à gauche de où nous venons de regarder. 

Nous savions que le milieu était trop élevé, ou que la cible était inférieure au milieu, donc si elle existe dans le tableau, quelque part, elle doit se trouver à gauche du milieu. Et donc nous allons définir l'emplacement du tableau juste à gauche du milieu comme le nouveau point final. À l'inverse, si la cible est plus grande que ce qui se trouve au milieu, nous effectuons exactement le même processus, mais cette fois nous changeons le point de départ pour être juste à droite du milieu que nous venons de calculer. Et ensuite, nous recommençons le processus. 

Visualisons cela, d'accord? Il y a beaucoup de choses qui se passent ici, mais voici un tableau de 15 éléments. Et nous allons tenir compte de beaucoup plus de choses cette fois. Donc, pour la recherche linéaire, nous nous en préoccupions juste pour une cible. Mais cette fois, nous voulons savoir où nous commençons à regarder, où nous arrêtons de chercher et quel est le milieu du tableau actuel. Nous sommes donc prêts à commencer, n'est-ce pas? Eh bien, pas tout à fait. 

Rappelez-vous ce que j'ai dit à propos de la recherche binaire? Nous ne pouvons pas le faire sur un tableau non trié, sinon, nous ne garantissons pas que certains éléments ou valeurs ne sont pas ignorés accidentellement lorsque nous décidons simplement d'ignorer la moitié du tableau. 

Etape 1 de la recherche binaire : vous devez avoir un tableau trié. Et vous pouvez utiliser n'importe lequel des algorithmes de tri que nous avons mentionnés pour vous placer dans cette position. Maintenant, nous sommes en mesure d'effectuer la recherche binaire. 

Répétons le processus étape par étape et tenons compte de ce qui se passe au fur et à mesure. Vous voulez donc tout d'abord calculer le milieu du tableau. Eh bien, nous allons dire que nous cherchons d'abord la valeur 19. Nous essayons de trouver le nombre 19. Le premier élément de ce tableau est situé à l'indice zéro et le dernier élément de ce tableau est situé à l'indice 14. Nous appellerons cela le début et la fin. 

Nous calculons le milieu en ajoutant 0 plus 14 divisé par 2. Milieu assez simple. Nous pouvons dire que le milieu est maintenant à 7. Est-ce que le chiffre 15 est ce que nous cherchons ? Non, ce n'est pas ça. Nous cherchons la valeur 19. Mais nous savons que 19 est supérieur à ce que nous avons trouvé au milieu. 

Nous pouvons donc changer le point de départ pour être juste à droite du milieu et répéter le processus à nouveau. Et lorsque nous faisons cela, nous disons maintenant que le nouveau point de départ est l'emplacement dans le tableau 8. Nous avons effectivement ignoré tout ce qui se trouvait à gauche de 15. Nous avons éliminé la moitié du problème et maintenant, au lieu de devoir parcourir 15 éléments de notre tableau, nous devons en parcourir que 7. 14 est toujours le point final. 

Et maintenant, nous recommençons cela. Nous calculons le nouveau milieu. 8 plus 14 font 22, divisé par 2 font 11. Est-ce que c'est ce que nous cherchons ? Non, ça ne l'est pas. Nous cherchons une valeur qui est inférieure à ce que nous venons de trouver. Donc, nous allons répéter le processus à nouveau. Nous allons changer le point final pour être juste à gauche du milieu. Donc, le nouveau point final devient 10. Et maintenant, c'est la seule partie du tableau que nous devons trier. Nous avons maintenant éliminé 12 des 15 éléments. Nous savons que si 19 existe dans le tableau, il doit se trouver entre l'élément numéro 8 et l'élément numéro 10. 

Nous calculons à nouveau le nouveau milieu. 8 plus 10 font 18, divisé par 2 font 9. Et dans ce cas, regardez, la cible est au milieu. Nous avons trouvé exactement ce que nous cherchions. Nous pouvons nous arrêter. Nous avons réussi à effectuer une recherche binaire. D'accord. Nous savons que cet algorithme fonctionne si la cible se trouve quelque part dans le tableau. Est-ce que cet algorithme fonctionne si la cible n'est pas dans le tableau? Eh bien, commençons à nouveau et cherchons cette fois l'élément 16, qui, visuellement, n'existe nulle part dans le tableau. 

Le point de départ est à nouveau 0. Le point final est à nouveau 14. Ce sont les indices des premiers et derniers éléments du tableau complet. Et nous allons répéter le processus que nous venons de parcourir à nouveau, en essayant de trouver 16, même si visuellement, nous pouvons déjà dire que cela ne va pas y être. Nous voulons juste nous assurer que cet algorithme fonctionne, en fait, d'une manière ou d'une autre et ne