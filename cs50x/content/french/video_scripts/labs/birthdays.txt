Dans ce laboratoire, votre tâche sera d'écrire une application web qui garde une trace des anniversaires des gens. Votre application web affichera un tableau d'anniversaires avec les noms des gens dans une colonne et leur mois de naissance et leur jour de naissance dans une autre colonne, ainsi qu'un formulaire où les utilisateurs peuvent ajouter un nouvel anniversaire à une base de données en tapant le nom d'une nouvelle personne, le mois et le jour de leur naissance, puis utilisant ces informations pour les stocker dans la base de données et mettre à jour votre site web en fonction de cette base de données, en affichant les noms et les anniversaires de toutes les personnes qui sont dans la base de données.

Pour ce faire, la première chose à comprendre est la structure de la base de données que nous vous donnons. Et nous vous donnerons une base de données qui a une table appelée anniversaires. Cette table a un ID. Chaque anniversaire a également un nom de personne dont nous stockons l'anniversaire ainsi qu'un entier pour le mois et le jour de la naissance de cette personne.

Jetons maintenant un coup d'œil au code de distribution que nous vous donnons en tant que partie de cette application. Il s'agit d'une application flask. Donc, examinons d'abord application.py. Ce que vous remarquerez, c'est qu'à l'intérieur de application.py, nous nous donnons accès à cette base de données en utilisant la bibliothèque CS50 pour accéder à birthdays.db représentant la base de données à l'intérieur de cette variable appelée DB.

Ensuite, nous avons une seule route dans cette application web, juste la route de barre oblique qui est celle par défaut, qui accepte deux méthodes de demande, GET et POST. GET sera la méthode de requête que nous utiliserons lorsque quelqu'un visite simplement notre page en tapant son URL ou en cliquant sur un lien. Et POST sera la méthode de requête que nous utiliserons lorsque l'utilisateur soumettra certaines données de formulaire, comme soumettre l'anniversaire d'une personne à ajouter à la base de données.

Si la méthode de demande est POST, nous avons déjà écrit cette partie pour vous, eh bien, cela signifie que l'utilisateur a soumis quelque chose via un formulaire. Et donc ce que vous voudrez faire est d'ajouter l'entrée de l'utilisateur avec leur nom et leur anniversaire dans la base de données. Et puis ils sont redirigés vers la route par défaut. Sinon, si l'utilisateur ne soumet pas un nouvel anniversaire, nous allons afficher index.html. En fin de compte, index.html doit également avoir accès aux informations sur tous les anniversaires des personnes figurant dans la base de données. Vous voudrez donc ajouter une logique ici pour interroger la base de données afin d'avoir accès à tous ces anniversaires et les transmettre à index.html.

Examinons maintenant index.html qui se trouve dans notre dossier Modèles. Vous remarquerez qu'ici, nous avons une section qui dit ajouter un anniversaire, puis rien en dessous pour l'instant. Ce formulaire vous appartiendra de le créer. Et puis nous avons un tableau pour afficher les anniversaires, où chaque ligne de ce tableau aura une cellule pour le nom de la personne et une cellule pour son anniversaire, son mois et son jour. Mais vous remarquerez que le corps de ce tableau est vide pour l'instant. Votre tâche finale sera donc à l'intérieur d'index.html de parcourir tous les anniversaires auxquels vous avez accès depuis la base de données et d'imprimer une ligne dans ce modèle HTML pour chacun de ces anniversaires, imprimant une ligne qui a un nom pour la personne ainsi que leur anniversaire.

Résumons maintenant ce que vous allez faire dans le cadre de ce laboratoire. La première chose à faire dans application.py est de rechercher tous les anniversaires et de transmettre ces données à index.html. C'est dans la section else de cette route pour une demande GET standard. Parce que lorsque quelqu'un obtient votre page, vous voulez interroger tous les anniversaires de la base de données, puis donner ces informations à index.html afin que votre modèle HTML puisse profiter de ces données pour afficher toutes ces lignes de tableau.

La prochaine étape dans index.html est de rendre ces lignes de tableau. Pour chacun des anniversaires que vous avez obtenus de la requête, vous allez en rendre chacun sous forme de ligne dans ce tableau avec une cellule dans ce tableau pour le nom et une cellule dans ce tableau pour l'anniversaire. Rappelez-vous que vous pouvez créer une ligne de tableau en HTML en utilisant la balise TR. Et vous pouvez créer une cellule dans cette ligne en utilisant TD, TD pour table data.

Et vous voudrez probablement utiliser une sorte de boucle ici aussi pour pouvoir boucler sur votre liste de tous ces anniversaires et pour chacun de ces anniversaires, en affichant une ligne qui apparaît à l'intérieur de votre tableau HTML.

Après avoir implémenté cette partie de l'application, vous devriez pouvoir afficher les anniversaires qui sont déjà dans la base de données. Mais maintenant, nous voulons également avoir la possibilité d'ajouter de nouveaux anniversaires à cette base de données. Donc, dans index.html, vous ajouterez un formulaire pour permettre aux utilisateurs d'ajouter un nouvel anniversaire. Ce formulaire devrait donner aux utilisateurs la possibilité de spécifier le nom d'une personne, le mois de naissance et le jour de naissance, puis de cliquer sur un bouton qui leur permet de soumettre ce formulaire pour ajouter un nouvel anniversaire à la base de données.

Et enfin dans application.py, vous devrez ajouter une logique pour traiter ces soumissions de formulaire en accédant aux données qui ont été soumises via ce formulaire et en insérant cet nouvel anniversaire dans la base de données. Une fois que vous avez fait cela, les utilisateurs devraient pouvoir visiter votre application web, remplir ce formulaire en tapant leur nom, un mois et un jour, et avoir leur anniversaire ajouté à votre base de données d'anniversaires. Et par conséquent, leur nom et leur anniversaire devraient également apparaître à l'intérieur de votre tableau HTML.

Comment pourriez-vous y arriver? Eh bien, pour exécuter des requêtes SQL sur votre base de données, vous pouvez utiliser db.execute. Rappelez-vous que DB est le nom représentant cette base de données que nous avons dans notre application flask. Et execute vous permettra d'exécuter une requête comme une sélection ou une insertion sur cette base de données à partir de votre programme Python. Et n'oubliez pas non plus que si vous ajoutez des points d'interrogation dans cette requête, vous pouvez les utiliser en tant que paramètres pour d'autres valeurs de sorte que vous pouvez substituer des valeurs provenant de l'utilisateur, par exemple, en tant que partie de la requête que vous exécutez.

Au fur et à mesure que vous le faites, vous voudrez également garder à l'esprit la distinction entre ces deux méthodes de demande, GET et POST. Lorsque l'utilisateur obtient la page, tout ce que vous allez faire est interroger tous les anniversaires et afficher cette page HTML qui a ce tableau de tous les anniversaires. POST, en revanche, c'est ce qui va se passer lorsque l'utilisateur soumet un formulaire. Vous voulez donc vous assurer que votre formulaire a une méthode POST pour vous assurer que lorsque vous envoyez des données, vous envoyez ces données via POST. Et puis assurez-vous que votre route est capable de gérer ces demandes POST, ajoutant chacun de ces anniversaires à la base de données de sorte que la prochaine fois que l'utilisateur visite cette page, leur anniversaire sera également sur cette page. 

Je m'appelle Brian, et c'était Les anniversaires.