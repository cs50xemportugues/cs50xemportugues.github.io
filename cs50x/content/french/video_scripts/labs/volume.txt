Dans ce laboratoire, votre tâche va consister à écrire un programme en C qui change le volume d'un fichier audio. En particulier, dans ce laboratoire, nous allons travailler avec des fichiers WAV, un format de fichier standard pour représenter des informations audio. 

Quelle est la structure d'un fichier WAV ? Eh bien, comme tout fichier, ces fichiers se composent d'octets. Et en particulier, dans un fichier WAV, les 44 premiers octets de ce fichier sont l'en-tête de ce fichier WAV qui contient des informations sur ce fichier que votre ordinateur, ou les programmes sur votre ordinateur, pourraient avoir besoin de connaître pour lire, comprendre et interpréter ce fichier. Après l'en-tête de 44 octets, il y a des échantillons audio de deux octets. Beaucoup, beaucoup de ces échantillons audio de deux octets sont répétés les uns à la suite des autres, où chacun de ces échantillons de deux octets représente la valeur d'une forme d'onde audio à un moment particulier. 

Donc, ultimement, votre fichier WAV va se composer d'un en-tête de 44 octets, suivi de nombreux de ces échantillons de deux octets. Et la chose intéressante à propos de ces échantillons de deux octets est que chacun d'eux est vraiment juste un nombre. Et si vous voulez changer le volume d'un échantillon, vous allez multiplier cet échantillon par un nombre. 

Si j'ai un échantillon audio et que je veux doubler le volume, par exemple, je prends chacun des échantillons audio du fichier audio que j'essaie de modifier et je multiplie simplement chacune de ces valeurs d'échantillon par 2. De même, si j'essaie de diviser par deux le volume pour un fichier audio particulier, alors je prends chacun des échantillons de deux octets et je les multiplie chacun par 0,5, ou 1/2, pour diviser le volume par deux également. 

En fin de compte, la façon dont votre programme va fonctionner est que nous allons exécuter notre programme sous forme de "./volume", suivi de trois arguments de ligne de commande. Le premier argument de ligne de commande est un fichier WAV d'entrée, un fichier qui existe déjà et qui représente le fichier audio que nous allons essayer de modifier. Le prochain argument de ligne de commande est le nom d'un nouveau fichier de sortie, un nouveau fichier audio que notre programme va générer qui aura le volume modifié. 

Et enfin, le dernier argument de ligne de commande de ce programme va être un nombre à virgule flottante représentant le facteur par lequel changer le volume du fichier audio d'origine. Dans ce cas, par exemple, nous utilisons un facteur de 2,0 pour signifier que nous voulons doubler le volume du fichier audio. Mais si nous avions essayé d'utiliser 0,5, par exemple, en tant que facteur, alors nous aurions divisé le volume du fichier audio par deux. 

Voici donc ce que vous devrez faire dans ce laboratoire. Pour prendre le fichier d'entrée et générer un nouveau fichier de sortie qui est le même audio mais juste avec le volume modifié, vous voudrez commencer avec l'en-tête de ce fichier WAV, puisque l'en-tête, ces premiers 44 octets du fichier, sont la première chose que vous trouverez à l'intérieur du fichier WAV d'entrée. Vous voudrez donc initialement lire l'en-tête du fichier d'entrée. Ensuite, vous voudrez écrire cet en-tête exactement de la même façon dans le fichier de sortie. Après l'en-tête, rappelons-le, viennent chacun de ces échantillons de deux octets, de nombreux échantillons de deux octets, d'affilée dans le fichier, représentant la forme d'onde audio du fichier lui-même. 

Vous devrez donc répéter, pour chacun de ces échantillons de deux octets, vous devrez d'abord lire l'échantillon à partir du fichier d'entrée, probablement dans une variable quelconque. Ensuite, vous voudrez multiplier cette valeur d'échantillon par le facteur de volume. Si vous essayez de doubler le volume de l'échantillon, vous doublez ce volume. Si vous essayez de le tripler, vous le multipliez par 3. Si vous essayez de diviser le volume par deux, vous multipliez par 0,5, par exemple. 

Et après avoir fait cette multiplication, vous devrez alors écrire ce nouvel échantillon dans le fichier de sortie. Ainsi, l'échantillon mis à jour, avec le volume modifié, est écrit dans le fichier de sortie pour chacun des échantillons audio de ce fichier entier. 

Au fur et à mesure que vous travaillez sur ce laboratoire, quelques techniques seront utiles. L'une d'entre elles consiste à profiter des différents types que C vous donne pour traiter des données de différentes tailles. uint8_t, par exemple, est un type qui stocke des entiers non signés de 8 bits, ou de 1 octet. Et cela est utile chaque fois que vous voulez représenter juste un octet générique de données. Par exemple, si vous essayez de lire un en-tête qui contient 44 octets de données, vous pouvez utiliser un tableau de 44 de ces entiers non signés de taille de 8 bits en tant que uint8_t, à l'intérieur d'un tableau, pour stocker votre en-tête. 

Pendant ce temps, int16_t est un type qui stocke des entiers signés, ce qui signifie qu'ils peuvent être positifs, nuls ou négatifs, de 16 bits, ou de 2 octets chacun. Et finalement, c'est un excellent choix de type pour représenter vos échantillons. Parce que nous savons que chaque échantillon fait 2 octets de taille. Et int16_t est la taille parfaite pour représenter ce genre d'informations. 

Ensuite, vous allez également vouloir traiter la lecture et l'écriture de fichiers. Et pour cela, ces deux fonctions seront probablement utiles, fread et fwrite. fread lira un certain nombre d'octets d'un fichier dans la mémoire à l'intérieur de votre ordinateur. Et de même, fwrite peut écrire des données, de la mémoire de votre ordinateur à un fichier particulier. Et vous voudrez probablement vous référer à la documentation pour chacune de ces fonctions, fread et fwrite, pour comprendre quels sont les arguments qu'ils prennent dans quel ordre et comment vous pourriez utiliser ces fonctions pour lire à partir du fichier d'entrée, puis écrire vos données mises à jour dans votre fichier de sortie. 

Maintenant, jetons un coup d'œil au code de distribution que nous vous donnons dans le cadre de ce laboratoire. Vous remarquerez que l'une des premières choses que nous vous donnons est un entier constant appelé HEADER_SIZE, égal à 44. Vous pouvez utiliser cette variable chaque fois que vous avez besoin de référencer le nombre d'octets à l'intérieur de l'en-tête d'un fichier WAV en tant qu'entier constant appelé HEADER_SIZE. 

Dans la fonction principale, nous avons déjà fait une partie du travail pour vous. Tout d'abord, nous vérifions le nombre d'arguments de ligne de commande pour nous assurer que lorsque l'utilisateur exécute ce programme, il fournit un fichier d'entrée, un fichier de sortie, ainsi qu'un facteur par lequel changer le volume du fichier d'entrée. Nous ouvrons ensuite le fichier d'entrée, en vérifiant que le fichier d'entrée a pu être ouvert correctement. Nous ouvrons ensuite le fichier de sortie en utilisant le mode W, W pour écrire ce fichier, afin de nous assurer que nous pouvons ouvrir le fichier dans lequel nous allons écrire correctement. Et ensuite, nous calculons le facteur, en convertissant ce facteur en un nombre à virgule flottante comme 2,0 pour doubler le volume ou 0,5 pour diviser le volume par deux. 

Voici donc ce que vous devez faire. Tout d'abord, vous voulez copier l'en-tête du fichier d'entrée dans le fichier de sortie. Rappelez-vous que vous savez que l'en-tête est toujours de 44 octets. Vous voulez donc probablement utiliser fread pour lire 44 octets de votre fichier, puis fwrite pour écrire 44 nouveaux octets dans le fichier de sortie. 

Ensuite, vous voudrez passer en revue chacun des échantillons, en utilisant probablement une sorte de boucle pour parcourir le fichier d'entrée jusqu'à la fin du fichier. Et pour chacun de ces échantillons de deux octets, pour le lire dans la mémoire, mettre à jour le volume, puis écrire cet échantillon mis à jour dans le fichier de sortie également. 

Vous remarquerez que nous vous fournissons un fichier d'entrée d'exemple, input.wav, que vous pouvez écouter en tant qu'échantillon audio. Et vous pouvez exécuter votre programme de volume sur ce fichier, en passant un facteur de 2,0 pour doubler le volume, ou un autre facteur pour changer le volume de manière différente. Et ensuite, vous devriez être en mesure d'écouter ce nouveau fichier de sortie et de détecter que c'est en effet le même audio, juste avec un volume différent. 

Après avoir fait toutes ces étapes, vous devriez avoir un programme que vous pouvez prendre avec n'importe quel fichier WAV et changer le volume d'un facteur particulier.

Mon nom est Brian. Et c'était le volume.