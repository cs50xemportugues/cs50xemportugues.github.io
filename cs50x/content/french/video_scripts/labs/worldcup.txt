Dans ce laboratoire, votre tâche consistera à écrire un programme en Python pour simuler les résultats d'un tournoi sportif. Dans un tournoi sportif, comme la Coupe du monde de la FIFA ou d'autres tournois sportifs, il arrive souvent que les tournois se terminent par un tableau à élimination simple où vous vous retrouvez avec plusieurs équipes qui s'affrontent les unes contre les autres, les gagnants passant ensuite au tour suivant et jouant l'un contre l'autre, puis les gagnants passent au tour suivant, jouent l'un contre l'autre et enfin les deux dernières équipes s'affrontent, celle qui remporte ce match étant finalement déclarée la gagnante du tournoi.

Comment pouvons-nous simuler ce type de tournoi? Eh bien, pour ce faire, nous avons besoin d'une idée de la façon dont chaque équipe est réellement bonne, afin que nous puissions comparer deux équipes et faire une prédiction sur qui est susceptible de remporter un match entre ces deux équipes. Souvent, les équipes ou les joueurs auront des notes, un nombre qui détermine à quel point cette équipe ou ce joueur est bon et, par conséquent, nous pouvons utiliser cette information pour comparer deux notes afin de déterminer qui pourrait remporter un match entre deux équipes.

Finalement, votre programme utilisera ce type d'informations, une liste d'équipes et de leurs évaluations, pour simuler un tournoi et simuler la probabilité que toute équipe particulière remporte ce tournoi. Pour ce faire, vous aurez besoin d'accéder à certaines données, nous vous fournirons donc des données formatées sous forme de fichier CSV, des valeurs séparées par des virgules, où chaque ligne correspond à une équipe qui a deux valeurs. D'abord, le nom de l'équipe, autrement dit, le pays par exemple d'où vient cette équipe, suivi d'une virgule, puis de la note de cette équipe, un chiffre représentant la force de cette équipe où une note plus élevée signifie que l'équipe est meilleure et est donc plus susceptible de gagner un match contre une équipe moins bien classée par exemple. Plus la différence entre les notes de ces deux équipes est grande, plus il est probable que l'équipe ayant la plus haute note remporte ce match.

Si nous stockions ces informations dans un fichier CSV, votre programme fonctionnera comme suit: vous exécuterez "python tournament.py" suivi d'un fichier CSV; celui que nous avons ici est la liste des équipes masculines de la Coupe du monde FIFA 2018. Après cela, votre programme va simuler une série de tournois, peut-être 1 000 différents tournois au sein de ces équipes, puis imprimer en fonction de ces résultats ce que le programme pense être la probabilité que toute équipe particulière devienne le vainqueur final du tournoi.

Comment allez-vous faire cela? Eh bien, commençons par examiner le code de distribution que nous vous donnons dans le cadre de ce laboratoire. Pour ce laboratoire, nous vous donnons quelques fichiers. Nous vous donnons des fichiers CSV, chacun d'eux contenant une liste d'équipes ainsi que la note de chacune de ces équipes, et nous vous les offrons pour quelques tournois différents, mais "tournament.py" est l'endroit où se trouve toute la logique. C'est le fichier Python que vous allez utiliser pour simuler un de ces tournois sportifs.

Nous commençons ici en définissant une variable "n", qui est égale au nombre de simulations à exécuter, et par défaut, nous allons simuler 1 000 différents tournois avec ces équipes. À l'intérieur de la fonction principale, nous vérifions que le programme est utilisé correctement avec un nom de fichier fourni en tant qu'argument. Ensuite, nous définissons une variable appelée "teams", qui sera initialement juste une liste vide, il n'y a pas encore d'équipes que nous connaissons. Mais la première chose à faire est de lire à partir du fichier CSV toutes ces équipes et de trier chaque équipe à l'intérieur de cette liste d'équipes, en stockant chaque équipe avec un dictionnaire où ce dictionnaire va stocker des valeurs pour le nom de l'équipe ainsi que pour l'évaluation de cette équipe également.

Après cela, nous définissons un autre dictionnaire appelé "count". Et "count" sera un dictionnaire qui cartographie des clés à des valeurs comme tous les dictionnaires, où dans ce cas, les clés seront les noms des équipes et les valeurs seront le nombre de tournois que cette équipe a remportés. Parce qu'au final, nous allons simuler n tournois, où n est par défaut 1 000, et nous voulons suivre combien de fois une équipe donnée remporte un tournoi. Et si une équipe remporte le tournoi 100 fois, alors le nom de cette équipe sera la clé et 100 sera la valeur, de sorte que nous puissions nous souvenir pour n'importe quelle équipe donnée combien de tournois elle a remportés selon notre simulation. Et sur la base de cette simulation, nous avons déjà écrit le code pour vous qui parcourt chacune de ces équipes et imprime quelle probabilité nous attendons qu'elles aient de remporter l'ensemble du tournoi.

Nous vous avons également donné quelques autres fonctions; nous vous avons donné une fonction "simulate_game" qui accepte deux équipes en entrée. Et ce qu'elle va faire, c'est renvoyer vrai si, selon la simulation, l'équipe 1 gagne et faux sinon. Cette fonction utilise un peu d'aléatoire, elle ne retournera pas toujours le même résultat à chaque fois, tout comme lorsqu'on joue un match entre deux équipes identiques, ce n'est pas toujours le cas que la même équipe gagne à chaque fois. Il y a aussi une certaine variabilité dans la fonction.

Ce que fait la fonction, c'est qu'elle regarde la note pour les deux de ces équipes, note 1 et note 2, et utilise cette information pour calculer quelle est la probabilité que l'équipe 1, par exemple, gagne le match. Et puis, en utilisant cette probabilité au hasard, elle renvoie vrai parfois si l'équipe 1 gagne et faux sinon.

Nous vous avons également donné une fonction appelée "simulate_round", qui fait la même chose, mais pas seulement pour un match mais pour un tour entier de matches entre de nombreuses équipes différentes. La fonction "simulate_round" accepte en entrée une liste d'équipes, et ce que la fonction "simulate_round" fera, c'est considérer chaque paire d'équipes une par une, équipes 0 et 1, puis 2 et 3, puis 4 et 5, et simuler le match entre chacune d'entre elles, vous renvoyant une liste des gagnants de ce tour. Ainsi, si vous donnez à la fonction "simulate_round" une liste de huit équipes, par exemple, "simulate_round" vous renverra une liste des quatre gagnants en associant les équipes 0 et 1, 2 et 3, 4 et 5, 6 et 7, par exemple.

Enfin, voici la fonction "simulate_tournament". Cette fonction devrait finalement simuler l'ensemble du tournoi, en commençant par toutes les équipes, que vous pouvez supposer être une puissance de 2, comme 16 équipes, par exemple. Et en simulant à plusieurs reprises des tours jusqu'à ce qu'il ne reste qu'un seul vainqueur du tournoi et qu'il vous appartient de compléter cette fonction.

Récapitulons ce que vous devrez faire dans "tournament.py". Tout d'abord, vous devriez compléter la fonction principale en utilisant "csv.DictReader", vous pouvez lire les équipes à partir du fichier CSV une par une, en traitant chaque équipe comme un dictionnaire, où il y a une clé appelée "team" qui représente le nom de l'équipe ainsi qu'une clé appelée "rating" qui représente l'évaluation de l'équipe. Maintenant, par défaut, lorsque vous lisez des fichiers en tant que fichier CSV, tout sera considéré comme une chaîne et parce que l'évaluation est un nombre, vous voudrez vous assurer que vous convertissez effectivement cette évaluation en un entier d'abord.

Une fois que vous l'avez fait, vous allez stocker chaque équipe en tant que dictionnaire dans cette liste d'équipes. Ainsi, les équipes finissent par être une liste de dictionnaires, un dictionnaire par équipe. Et une fois que vous avez cette liste d'équipes, vous pouvez alors simuler n tournois, où n par défaut est 1 000, en appelant votre fonction "simulate_tournament".

Après chaque tournoi, que vous pouvez imaginer par exemple sous forme d'une boucle qui va simuler