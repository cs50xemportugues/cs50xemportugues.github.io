All right, one more thing I want to touch on really quick about JavaScript, and that is the notion of events. So an event is something that goes hand in hand with HTML on JavaScript, and it is a response to a user doing something on a web page. So for example, perhaps they click a button. Perhaps the page has finished loading after the user hits refresh, for example. Maybe they hover over a portion of the page, or something like that. All of those things are events. And JavaScript has support for what is called an event handler, which is some JavaScript code that will execute once that event has taken place. So it allows our site page to be very interactive. We type in a box, for example-- we could have an event handler, that pops up a message that says, please enter your password. So it's just a complete-- it's an empty field that says nothing at all. You start to type in it, and then this box pops up because you started typing, which is an event on the page. And it tells you to do something that is a JavaScript event handler taking effect. Many elements of HTML have support for events as an attribute. So here's an example of some really basic HTML. I have my head and my body, and inside of the body, there are two buttons. And they have this attribute called on click. On click is a definition, basically, for an event handler. So I want something to happen when I click the buttons. Right now it's nothing, but I can put something in there so that when I click on either of those buttons, that function that's in between the quotation marks there would get called. We can write a really generic event handler in JavaScript, for example, that creates an event object, and will tell us which of those two buttons were clicked. And it might look something like this. Button on click equals alert name event. If we do this, we have basically set up our HTML, so that when either button one is clicked or button two is clicked, the alert name function will be called, and an event will be passed in. The event is automatically generated by the page, and it basically contains all of the information about what just happened. And from that information, we can extract more information. So for example, here what the alert name function might look like, and notice that here, I'm also accepting an event parameter. What am I doing then? I'm getting a new JavaScript local variable called trigger, and I'm asking for that event's source element. And what that is basically telling me is, what is the element on the page that was interacted with that triggered this event? Or rather, put another way, what element effectively was passed in to this function. Because, again, this is automatically generated. The page knows which button we touched, and so, basically, what's happening here is, that button-- whichever one of the two it was-- is getting passed into this function. Then-- and you'll see a little bit more of this when we talk about the document object model-- I can access that trigger's inner HTML to figure out which button was clicked. Now, what is inner HTML? Let me jump back a couple of slides for a second here. The inner HTML is what is between the button tags. In this case, button one is inner HTML and button two is also inner HTML. So what happens when I click on those buttons is, it will alert to me, you clicked on button one if I happened to click on button one, or, you clicked on button two, if you happened to click on button two. Now, again, we are just scratching the surface of JavaScript, but I wanted to give you a sense of some of the different things that you can do, so that you can then go forward, look at the documentation, and see the very wide range of things that you can do as well, by just applying some of the basic tenets that we've learned about in CS50, and really expanding your knowledge exponentially. I'm Doug Lloyd. This is CS50. 