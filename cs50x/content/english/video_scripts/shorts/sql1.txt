So in our videos on web development, we've talked a couple of times now about what a database is. And in this video, we're going to get into a bit more detail and show you exactly what a database is, why we would use it, and how we might manipulate it. In order for us to build websites that are sort of more complex than just a page where they just go and see news, for example, we might need a database to store information, such as username and password combinations so that a user attempts to log in. That log-in information is sent to the database. It is checked against information in the database to see whether that username-password combination matches.

And if so, it lets the user in. We might also store other stuff for users, like their shopping history or really any other information that you might want to keep long-term for a user. Now, if you ever used programs like Microsoft Excel or Google Sheets or Numbers, you're probably familiar with the basic idea of a database.A database consists of a couple of different levels of hierarchy. Within a database, we have tables. And within each of those tables, we have rows and columns. And if you are familiar with Excel, or perhaps even if you're not, let's take a quick second and I can draw this analogy for you about what a database, a table, a row, a column is. And then we can translate that in just a moment to the same idea in SQL.

So on my screen here, I've opened up an Excel file. And across the top here, you see I have these letters-- A, B, C, D, E. These would be different columns in my file. Down the left side, I have numbered rows, where I might put information. So, for example, I might just put my name here in cell A1. So it's in the A column in the first row. Now, down at the bottom left is a feature that you may not have used too much if you don't use Excel very frequently. But there's these notions of sheets. Sheets are sort of akin to different tables. Notice that when I switch to sheet 2, the data that was in sheet 1, my name, is no longer there. So each sheet has its own unique set of rows and columns. But all of these sheets are still bound up in one single file called Book 1. So the analogy here is that Book 1 is our database, which contains a different number of tables, which in Excel parlance is just a sheet. And each sheet has columns that we can put data in and rows that we can put data in, as well.

So there are a couple of different types of database engines that we can use in our programs. We're going to talk about SQL, S-Q-L, which stands for the Structured Query Language. The Structure Query Language is a programming language whose sole purpose in life is to query or ask questions of or retrieve data from a database. And there are many different implementations of SQL. Two of the most popular are as follows-- we have MySQL which is an open-source platform. It is very commonly used to establish relational databases. We're not going to get into a lot of detail in this video about what a relational database is versus other types of database. But just know that there are more than one type, and we cover relational databases in this course. Another type, which we actually have used in CS50 since 2016, is SQLite, which has a very similar feature set to MySQL. But it's just a little more lightweight. It's a little easier to use on CS50 IDE.

And so that's why we're actually going to be using that one in the class. Now, regardless of which implementation of SQL that you use, a lot of them will come with a tool called phpMyAdmin, which is a GUI or Graphical User Interface tool that is used to execute some of the more tedious or mundane database queries in a more user-m friendly way because you can just click and do things in the web browser. And those are most commonly used to build databases in the first place and to set up tables because that's the first thing you're going to do once you get your database configured, is to create a table. Because without a table, we have no rows and columns. And without rows and columns, we can't store any data. Tables have very cumbersome syntax that is used to set them up. And so using phpMyAdmin, the graphical interface, to build your table is definitely gonna come in handy. In the process of building your table, you're going to have to specify exactly which columns are going to be stored in that table. So at the very beginning, when you create your table, you say, my table's going to store usernames and passwords and whatever sort of other information you want. and you have to specify that before you have inserted any data into the table.

So you have to design ahead of time what your table is going to look like. Once you've done that, pretty much every query except for, like, deleting the database and deleting the table that you're going to use on that table going forward is going to refer to data which is stored in the different rows of the table. 