Another thing that we're sort of familiar with in C, although it's not native, we had to build it ourselves, is the concept of a dictionary. Now dictionary is generally close in spirit to the concept of a hash table. And remember that hash tables were not native to C although they are native to a lot of programming languages. We had to build it ourselves. So it allows us to associate indexes with keys as opposed to integers, which we had to do in C. So if we wanted to have, for example, an array of something, we could only refer to the elements of the array by an index number, array square bracket 0, array square bracket 1, and so on. In Python, we can now associate elements of a list or elements in this case of a dictionary with keywords as opposed to integers. So for example, here is a dictionary of pizzas. So again, familiarize yourself with the different types of brackets we're using. So remember, in lists we have square brackets to indicate the beginning and end of a list. In tuples we use parentheses to indicate the beginning and end of a tuple. In dictionaries we use curly braces to indicate the beginning and end of a dictionary. Inside of this pizza dictionary I have four key value pairs. I associate the key cheese with the value 9, I associate the key peperoni with the value 10, and so on. Now, how might we want to work with this? These again are out keys. We use a colon to separate the key value pair. And we specify-- and those are our values here in green. I can change the value of different key value pairs in the dictionary as well. So I could say pizzas square bracket cheese equals 8, and now the key cheese is not associated with 9, it's associated with 8. I could use the different keys in my dictionary in Boolean expressions like this. If pizza square bracket vegetables is less than 12 I could do something. I can also add new keys to the dictionary, key value pairs the dictionary, without having to do anything crazy. Pizzas bacon, that key didn't exist before, equals 14. Now we have a dictionary that has five different key value pairs in it. Again, pretty straightforward to do. But we've introduced a new problem. If we don't have integer based indexes like we did in C, how do we iterate through the dictionary? We can't just iterate over the-- I guess we could maybe iterate over the keys alphabetically, but then we would have to sort them alphabetically. That feels kind of messy. Fortunately, we can do this, and it's because of the flexibility of the for loop. And I pointed that out to you a little bit earlier and I said we'd come back to talk about how the for loop was more flexible. Let's see an example of this. So the for loop is not just used to count from one number up to another. We can also use it to iterate over the elements of a dictionary. So instead of saying for x in range 500, which is going to do something 500 times, I can say for pie in pizzas. That's pretty cool, right? So what it's going to do there is it's going to use-- pie basically becomes every single key. So cheese, bacon, vegetable, pepperoni, whatever else I had in there, that's how we iterate over all of those keys in Python without having the value of integers that we did previously. So for example, here's the original pizzas dictionary that we had just a moment ago. If I say for pie in pizzas print pie, because again pie is substituting for the keys, this is going to print out for me a list of all of the keys in my dictionary. So these are maybe the kinds of pizzas that I have available. Or for pie comma price in pizzas dot items-- now I have to specify pizzas items here to make it so that it can iterate over all of the keys. Excuse me, over all of the values. I can iterate over all of the keys automatically in a dictionary. But if I want to iterate over the values, I have to transform the dictionary into a list. In order to do that, I need to use the dot items method to transform my dictionary into a list for purposes of just iterating over this. Then I can print out the price. So in this case, I would print out 12, 10, 9, 11. That's weird. It didn't print them out in the order I specified and that's kind of a side effect here with the dictionary. You're not necessarily going to get your-- when you transform the dictionary into a list to iterate over it as we do here, you're not guaranteed that that list is going to maintain its order. Now, the keys and values will still be associated correctly, if I wanted to print out both as we'll see in just a second. But the order is not guaranteed anymore. Now usually that's not going to be a problem. Sometimes it might be, in which case you're just going to have to use a list at the outset. And there are, of course, ways around it. Let's say I wanted to print both the key and the value. It's very similar to what I just had before. I'm still iterating over pie and price, and I'm still transforming the pizzas dictionary into a list temporarily so I can iterate over it. And I'm using my print function again here with now I'm not specifying 0 and 1. I could, and specify 0 in the first one, 1 in the second one. But I want to actually print the key first then the value. I don't want to have to invert them so I don't have to plug in the ordering that I did before when I was doing the presidents example, iterating over all those tuples. And this would print out, a whole Buffalo chicken pizza costs $12, a whole cheese pizza costs $9. Again, going through each element and getting the key value pair and printing it out as I indicated. So that's how I can iterate over an entire dictionary, printing out all of its elements. Again, with the caveat that it's not ordered, so I'm not guaranteed to get them in exactly the same order I put them in. But again, that trade off is probably going to be worth it most of the time.