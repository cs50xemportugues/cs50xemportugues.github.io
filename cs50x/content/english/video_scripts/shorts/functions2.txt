All right. So functions are great. We know that. Now let's start writing them. Let's start getting them into our programs. In order to do that, the first thing we do is declare the function. When you declare a function what you're basically doing is telling the compiler, hey, just so you know, I am going to be writing a function later on and here's what it's going to look like. The reason for this is because compilers can do some weird things if they see a set of symbols that they're not familiar with. So we just give the compiler a heads up, I'm creating a function and it's going to do this. Function declarations generally if you're organizing your code in a way that others will be able to understand and make use of, you generally want to put all of your function declarations at the very top of your code, right before you start writing main even. And conveniently, there's a very standard form that every function declaration follows. They all pretty much look like this. There are three parts to a function declaration, return type, name, and argument list. 

Now the return type is what kind of variable the function will output. So for example, if we think back a minute ago to the multiplying two numbers function, what do we expect if we multiply an integer by an integer the output will be probably an integer, right. Multiplied two integers together, you get an integer. So the return type of that function would be int. Name is what you want to call your function. This is probably the least important part of the function declaration, in terms of functionality. But is actually probably one of the most important parts of the function declaration in terms of knowing what the function actually does. If you name your function f or g or h or mystery or something like that, you're probably going to get a little tripped up trying to remember what those functions do. So it's important to give your function's meaningful names. 

Lastly, argument list is the comma separated list of all the inputs to your function, each of which has a type and a name. So not only do you have to specify what type of variable the function will output, you also want to specify what type and types of variables the function will be accepting as inputs. So let's do an example here. Let's just take a look at a more concrete one. So here's an example of a function declaration for a function that would add two integers together. The sum of two integers is going to be an integer as well, as we just discussed. And so the return type, here in green, would be int. That just tells us that add two ints is going to, at the end of the day, output, or spit it back out to us, an integer. Given what this function does we want to give it a meaningful name. Add two ints seems appropriate, considering we're taking two integers as inputs and hopefully adding them together. It might be a bit of a cumbersome name and frankly this function is probably not necessary since we have the addition operator, if you recall from our discussion of operators, previously. But let's just say for sake of argument that this function is useful and so we'll call it add two ints. Lastly, this function takes two inputs. Each of which is an integer. So we have this comma separated list of inputs. Now we generally want to give a name to each of them so that they can be used within the function. The names aren't terribly important. 

In this case, we don't necessarily have any meaning attached to them. So we can just call them a and b. That's totally fine. If however, you find yourself in a situation where the names of the variables might actually be important, you might want to call them something other than a and b to give them something more symbolically meaningful. But in this case, we don't really know anything else about the function. We just want to add two integers. So we'll just call those integers a and b. That's one example. 

Why don't you take a second to think about this one, how would you write a function declaration for a function that multiplies two floating point numbers? Do you remember what a floating point number is? What would this function declaration look like? I actually recommend you pause the video here and take how much time you need. Think about what this function declaration would be? What would the return type be? What would a meaningful name be? What would the inputs be? So why don't you pause the video here and write-up a function declaration for a function that would multiply two floating point numbers together. Hopefully you paused the video. 

So let's take a look at an example of one possible declaration. Float mult two reals float x, float y. The product of two floating point numbers, which recall are how we represent real numbers or numbers with decimal values in c, is going to be a floating point number. When you multiply a decimal by a decimal, you're probably going to get a decimal. You want to give it a relevant name. Multiply two reals seems fine. But you could really call it mult two floats, or mult floats. Anything like that, as long as it gave some actual meaning to what this black box was going to do. And again, in this case, we don't seem to have any meaning attached to the names of the variables we're passing in, so we just call them x and y. Now if you call them something else, that's totally fine. In fact, if you did this declaration instead using doubles instead of floats, if you recall that doubles are a different way to more precisely specify real numbers or floating point variables. That's totally fine too. Either one of those would be fine. In fact, there are several different combinations of ways to declare this function. But these are two pretty good ones.
