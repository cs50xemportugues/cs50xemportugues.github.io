All right, now here's something entirely different. Let's talk about objects. So objects we have not covered yet in CS50. And Python is an object oriented programming language. The closest thing we have to an object is a C structure. So C structures, you may recall, have a number of fields in them. We might call those fields, particularly in an object oriented context, properties. But those properties are never kind of able to just be on their own, right? They're always bound up and tied into some definition of some C structure. So if I define in C here, as I do at the top right, a car structure that has two fields or two properties in it, year and model, I might be able to say the following. Struct car Herbie-- I'm declaring a new variable of type struct car called Herbie-- and I'm saying Herbie dot year equals 1963, Herbie dot model equals beetle, totally OK, right? Because in each case where I'm using year and model, I'm associating it with some structure of that data type, in this case Herbie. But I could never say this. Is not valid in C, at least with what we have here, because year and model don't just kind of hang out on their own. They're attached to what-- they're part of what it means to be a struct car. So we always have to associate them with a struct car. So that would not fly. So that's sort of the-- that's sort of the analogy of object properties to C structure fields. But objects, in addition to having properties, also have methods. And you've heard me use that word a couple of times so far in this video. Methods are basically functions that are inherent to what it means to be an object. You can't call that function just kind of out of the blue on anything. You can only call that function on objects of that type, on objects where that function means something. So properties and methods don't ever stand on their own. They're always part of what it means to be an object. And because of this, objects become a lot more important. If you have these properties and you have these methods and they're always dependent on objects, that's where the term object oriented comes from. The object is the most important thing. We don't pass objects into a function, we call methods on objects. And that's the general syntax that you'll see in a lot of object oriented programming languages, is some object, and there is some method-- which again, is just another word for a function-- that is associated with it that we are calling on that object. We'll take a look at an example of this in just a moment. Now objects are not necessarily generic. We can actually create our own specific kinds of objects just like we created our own specific types of structures in C. And the way we do that is using the class keyword. The class keyword introduces a new kind of object. Every class, so every new kind of object you create, requires an initialization function. We didn't have to do this in C. But basically what it does-- and you'll also hear this term as a constructor, you'll hear that commonly used in languages like C++ for example-- and basically what it does is it creates an object for you and it puts some-- it assigns the value of some properties automatically. Remember that in Python we can only declare variables by assigning them a value. So basically, this is the analogous idea. We are creating an object of a particular class, and we are filling in all or many of the properties of that object with some data. Then, in addition to defining the properties of the object, we also have to define functions or methods that can apply to the object. Every method that we define inside of the class has at least one parameter, and that parameter is canonically-- although you don't have to call it this-- is called self, and basically all it is is a reference to the object so that we can always know what object we are talking about. So every function that you write, every method that you write in a class to find some new kind of object, will always have one more parameter than you think you need, because the first parameter there will always be self. Let's try and distill this into some actual code so you can what we're doing here when we're talking about defining a new kind of class, defining some methods, and then we'll see how we can apply those methods to objects in that class. So here is a very simple class called student. So class Student with a capital S-- apparently this means that I am now going to create-- whenever I want to create a new student object I'll use that capital S Student keyword. And I'm defining three functions. The first is that constructor, that initialization function, which is always called underscore underscore init underscore underscore. Now, my Student apparently is going to have two properties. They're going to have a name and an ID. But because I'm defining a method inside of that class, I always have to include that self parameter so that I always know what object I am talking about or what object to being invoked here. Inside of my initialization function I'm doing something pretty straightforward. I'm just saying, self dot name equals name and self dot ID equals ID. So I'm assigning the name and ID properties of the Student object to be whatever I pass in here. And then I have another function called changeID, and apparently I use this to change the idea of a student, the ID number of a student after I've already created them. Because I'm assigning the ID when I initialize it, but here apparently I've already created the Student object and I'm going to change it. So changeID takes two parameter, self against so I know which Student, which capital S Student object I'm talking about, and the ID number that I want to change them to. And then I have a function called print, which takes just one parameter, self. It's apparently not going to take anything else, but still I always have to indicate the self parameter. Always has to be part of any methods that you define for a class that you create. And apparently what I'm doing here is printing out self dot name and self dot ID with a little dash between them. That's what's happening there. It's just some variable interpolation just like we saw before. I'm just printing out self dot name dash self dot ID. So what would happen here? So I'm creating a new variable, a new object, called Jane. And this is my initialization. I'm calling the constructor function. Jane equals Student with a capital S, again, that's the name of our class, and I'm passing in tow values. Jane, which I apparently want to map to self dot name, and 10. So immediately after this, what would happened is I would have a new student object called Jane, and Jane's name field would be Jane in quotes, and Jane's ID field would be 10. So if I printed it out-- and you can actually take this code and recreate it in CS50 IDE and see it for yourself-- if I then printed it out, I would print out Jane space dash space 10. Then if I executed Jane dot changeID 11, you can probably guess what would happen because then when I print it again it would print Jane space dash space 11. So that's just some examples of creating-- of defining a class, defining methods, assigning properties. Again, all of this sort of is inherent to what it means in an object-- to be working in an object oriented programming language. So even though this may be very unfamiliar and new, especially coming from a language like C, this, if you go forward and do object oriented programming in languages like Python, like PHP, like JavaScript, or like many, many others, this sort of notion of methods, properties, and how we work with them is going to be really important to sort of synthesize.