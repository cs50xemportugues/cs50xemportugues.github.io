All right, here's a new data type that we've never-- or a new kind of way of storing data in Python that we're not familiar with from C and that's called a tuple. So what a tuple is, it is an ordered, immutable set of data, basically what we're saying here is we have a collection of a couple of things that we will never change, but the order matters. And we'll take a look at an example in just a moment of what a tuple might look like or what a list of tuples might look like and why we might want to work them. But they're really good for associating collections of data. They're really fast to navigate in Python. And they're really kind of analogous to a structure in C where the values will never change, but you've arranged them because of the way you arranged your fields in C in a particular order. So here, for example is a list-- so a list which we just talked about-- of tuples. So we're mixing these two concepts together here. Here is a list of tuples. This is a list called presidents that contains four tuples, George Washington comma 1789 in parentheses-- that's how we indicate a tuple-- John Adams comma 1797, and so on and so on. Each of these, each of George Washington 1789 and John Adams 1797 and so on, that is a single tuple. And then you see here that we have the commas at the end of those tuples to indicate that all of those are items in the larger list called presidents. Now, we can iterate over this list and do things with it. So let's take a look at an example of how we might do that. So up at the top right is our presidents list from just the previous slide. And I can do the following. For prez comma year in presidents. So now, notice, I'm not just saying for x in range where I'm using one iterator, I have two, prez comma year. And if you look, you'll notice that that actually matches what I have there in the presidents list. I have a set of four tuples where each is arranged prez comma year. Then I'm doing something weird. Print in square bracket-- in curly brackets 1 curly bracket 0 took office dot format prez year. What is happening? This is actually just how the print function in Python does what printf does in C. Instead of using percent s or percent c or percent d, those format specifiers that we're used to from C, here we use the dot format method, which we'll talk about again in just a moment, at the end of the print function. And we can specify the order in which we want those parameters to come out. So the 1 and 0 there match like this. Now granted, I wrote this deliberately to show you that I could rearrange this list. I also could have just swapped prez and year and I wouldn't need the numbers at all. If you leave them out it will just go left to right through whatever the arguments are to format and plug those in left to right just to fill in all of the curly brace emptiness's that you have in the print function. But here, I can also explicitly take them out of order if I want it. So that's all I'm doing here. I'm getting a list. I'm getting a single tuple from this list and I'm basically printing its elements in reverse order plugging them in. So again, a contrived example, but I deliberately put it here to show you the flexibility of the print function and to introduced several concepts to you at once because you also are probably going to see a lot of things like this when you're doing research and trying to figure out what Python functions to use. You'll see a lot of unfamiliar things sort of blending together at once. So I wanted to just kind of introduce it to you here as well. But you can probably guess what this is going to do. It'll print out the following. In 1789 George Washington took office, In 1797 John Adams took office, and so on. It's going to iterate through the list and print out each tuple plugging in its values. And because I have the 1 and 0 there as opposed to just leaving them blank, it swaps the order of them. OK?