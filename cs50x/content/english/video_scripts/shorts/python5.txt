So arrays. So arrays are really where Python is going to start to shine and show us some of the real advantages it has over a language like C, which is a little more constricted in what it can do with arrays because of two things. One, they're fixed size, and two, we can only store one type of variable in them. We can only store an array of all integers, all characters, all some structure that we created, and so on. In Python, we don't actually call them arrays. We call them lists, but they're effectively the same general idea, the same concept we're familiar with. They're not fixed in size. So similar to a linked list really we can grow and shrink them as we need, as our program demands more memory or less memory to be consumed by the list the language is flexible enough to allow us to do that. And we can always add more things on, splice or remove things from the middle pretty easily. So let's get in the habit of calling these things lists now instead of arrays. But to declare a list it's really pretty straightforward. Nums equals square brackets. There we go. We have it. That's an empty list or an empty array. But that's all we really need to do to do it. We could create a list that has a couple of elements pre-populated into it. Nums equals 1, 2, 3, 4. That is an explicitly created list. Python also has support for something called a list comprehension, which we're not going to get into in a lot of detail here, but I want to show you what it looks like. Nums equals x, and then I have a for loop inside of my declaration of my list. This is called the list comprehension, and basically what this is doing is I'm using the for loop to generate a list of numbers for me. And instead of doing anything with that list like where I as printing them out before, I'm using that list that the for loop generates to assign it to nums instead. So what this would do is create a list of 500 elements, all of the numbers up from 0 all the way up to 499, because again range excludes that final parameter. So we're not including 500. Our range has 500 things in it, but it's going from 0 to 499, not 0 to 500 which would be 501 things in the list. Now, instead of the square bracket syntax, there's also just saying nums equals list parentheses, which is a function that creates a list, and if you don't pass anything in it returns an empty list or an empty set of square brackets. So that's exactly the same as what we saw just a moment ago with the blank empty list. Now we have the following. We could say nums equals 1, 2, 3, 4. So that's explicitly creating a list of four elements. We can attach an element to the end of the list. We can say, nums dot append 5. And what that's going to do is that's going to add 5 to the end of the list. It's going to tack it on at the very end. This line of code would do exactly the same thing. Nums dot insert parentheses 4 comma 5. Well, what does this mean? Well, what's happening here is we're inserting in the fourth position, again counting from 0, and if you remember how we count in C we know that 1 here is in the zeroth position, 2 is in the first position, 3 is in the second position, 4 is in the third position. So what we're doing here is really just inserting into the fourth position the value 5. So this line, and this one that we just saw do exactly the same thing. They put a 5 at the end of that array. This also does the same thing. Nums square bracket len nums colon 5 equals 5. Little bit weirder, but basically what we're doing here is we're creating another list effectively, and we're splicing it on to the one that exists before. So what I'm saying is, I'm creating a new list. There's a list there with a single element, 5. And I'm saying, the nums list from position 4, which is the length of nums forward, gets this list assigned to it. So if i had put 5 comma 6 there, after this would execute I would end up with nums equals 1, 2, 3, 4, 5, 6. So this is how I can perhaps attach one list to the end of another list, as opposed to attaching one element to the end of a list. So len nums works just like strlen might if you're familiar with that from C. It calculates the length of a list. So len now becomes a function in Python that is usable to calculate not just the length of a string, but the length of any arbitrary list. Kind of useful.