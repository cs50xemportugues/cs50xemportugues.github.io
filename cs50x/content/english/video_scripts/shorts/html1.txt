So we spent about-- if my math is right, and I think looking back-- I think we spent about 35 videos talking about various aspects of C, maybe a little more, maybe a little less. And we didn't cover everything in C, but we covered a big chunk of the language, the vast majority of it, certainly for common uses. Now we're going to talk about another language, HTML. And we're going to cover it in just one video. 

But that's going to be OK. That's going to actually become something you're going to get used to. Now that you have the fundamentals of one language, it's actually pretty easy to start learning others. So we're going to start to step a little back and gloss over the basic differences between these languages and sort of leave you to it. There's a lot of really great resources on the internet, which we're going to start directing you towards because the internet is a vast repository of information. And so it's not like you'll be losing out necessarily by not having the information covered in a video. You'll still be able to get everything you need and use the knowledge you've already built up by understanding C to make the learning curve for these other languages actually a lot flatter. I promise. 

But let's talk about one language that's really fundamental for every web page, which is HTML. HTML is the Hyper Text Markup Language. HTML is a language but it is not a programming language. 

HTML doesn't have variables. It doesn't have logic or functions or anything like that. We can't do any programming per se in HTML. Sometimes you'll hear people describe themselves as HTML programmers, which isn't entirely accurate. We can't write HTML programs. 

HTML is just used to mark up text. It's called a markup language. And what this does-- this markup-- we use tags in HTML and these tags-- this markup-- semantically defines the structure of a page and causes the plain text that exists between tags to be interpreted by browsers in different ways. And perhaps it's best to explain this by way of an illustration. 

Here's a very simple HTML page, not an HTML program, again, an HTML page. And we know it's an HTML page because we've bounded everything with HTML tags. So this is what an HTML tag looks like. It's between angle brackets. And notice at the top we have HTML and at the very bottom, after we've done what is apparently a lot of other HTML, we have angle bracket slash HTML. So that sort of is the boundary between what is HTML and what is not. And of course, conventionally, just as you wrote all of your C programs with dot C extensions, all of your HTML files will end with dot HTML extensions. But there's more going on here. We don't just have these HTML tags. We apparently have this thing called a head tag. Well, OK, what's that? 

Well maybe it's best to distinguish by way of a body, body being the content of the web page. So maybe the head tag defines stuff that isn't in the browser window proper, but is somehow important to our web page being rendered correctly. For example, inside of the head tag we have title tags. 

So title being hello world, that's actually going to be what shows up in the tab in Chrome or in safari or Firefox-- whatever browser you prefer-- that's what's going to show up in the title. And before tabs it would show up in your entire browser window and you can only have one page open in a browser window at a time. So that's going to be the title of my page up in the tab or the browser window bar, hello world. And then the content of my web page will be world, hello. So let's take a look at what some thing like this might look like. This is a pretty simple HTML page. So I'm here in my CS50 IDE and I've zoomed in a little bit. And I'm just going to open up hello dot HTML and show you that this is pretty much the page content that we saw before. My simple HTML, head tags, title tags, body, and so on. I've indented to be clean. 

And then what I can do in my IDE is just preview the page. And there we go. The content of my page is world, hello, and I don't see anything in from the head tags there. It's just the content of the body. World, hello. And again the body just said, world, hello. The other part is missing. 

So that's really all it is. This is a very simple basic HTML page. Now I've indented my HTML to be really nice and organized, but I don't actually have to. I could make it look pretty ugly. And this would still work. This would be the exact same web page. I've just gotten rid of all of the white space. 

As it turns out, white space is data. And so when we're sending data from sender to receiver, from server to client, data costs money. And so getting rid of whitespace is actually a good idea if you're somebody who serves up a lot of web content. It's a bad idea if you're somebody who's learning this stuff and you want to have it nicely organized. This is a lot easier to parse than this. But it's functionally identical. 

The indentation and stuff like that doesn't actually matter in HTML. All that matters is opening tags and closing tags in the correct order. Notice what happened here, though. The markup gives us a way to communicate extra information about what we've written. The Hello, World part was interpreted as the title. And the world, hello part was interpreted as the content or what should be visible on my web page. 

There are over 100 of these different tags and lots of great resources online to find them. We're going to talk about a few of them in this video, some of the really fundamental stuff. But we're not going talk about it all because it would be exhaustive to do so. 

Another thing you can do, though, is open up developer tools. And if you recall from our video on HTTP, I explained how to open up developer tools. In Chrome it's usually the F12 key to open up the developer toolbar. Then instead of choosing the Network tab, you can choose the Elements tab. And if you load a web page, you'll actually see the HTML that creates that web page. And so you can learn a lot about HTML by looking at your favorite websites and seeing how they build the various pieces of them that you like. So maybe there's this cool pattern or something like that. How do they make it with HTML? Well you can just open up your developer tools and hover over that element and see exactly what HTML makes it. So that's a really good way to learn HTML, and I strongly recommend that you do it both to learn HTML and also to learn a little bit about some of the options available to you in developer tools, which will certainly come in handy as you begin doing more intensive web programming. 
