The next one that might come in handy is mkdir, which is short for make a directory, if I need to create a new folder. If you're familiar with the GUI operating system, you might right-click. And then, when the context menu pops up, choose New Folder. That's probably how you've done it before. But we can also create directories at the command line. So we're back in the IDE. I'll zoom-in on the terminal and list the contents of my directory again, just to give us a frame of reference. Let's say that, now, I've finished working on problem set 0 and problem set 1. So I want to create a new directory to work on for problem set 2. How do I do that? 

Well, again, I could right-click in the left side there and choose New Folder and create a pset2 directory. That would work too. But then I also do it at the command line pretty quickly, by typing mkdir, space-- I typed in n, but-- space pset2. If I hit Enter and then I list the contents of my directory again, I see that, look, now I have a pset2 folder. And I can navigate into that using cd and do all the work I need to do for pset2. Incidentally, I'll just pop over here really quickly to the file tree. And you can see that, also, in the graphical File Explorer, we can see that the pset2 directory has also been created there. And I can navigate to it, using the GUI as well. The next time and that's probably going to come in handy is cp, which is short for copy. Copy, unlike all the other commands we've seen before, takes two arguments, a source, the name of the file that you want to copy, and a destination, where you want to copy the file to. It's pretty easy to copy a file, so let's do that. 

So we're back in the IDE. I'm going to list the contents of my current directory with ls. Now, let's say that I want to make a copy of hello.txt. Again, from the file tree on the left, the graphical interface, I could right-click on hello.txt, make a copy, paste the copy. But I can do it pretty quickly at the command line too. 

Let's say I want to copy hello.txt to hi.txt. I can cp, space, hello.txt. That's my source file, so that's why I'm going to choose that one first. And then I need to name the destination file, hi.txt. I hit Enter. And if I list the contents of my directory again, there's hi.txt. I made a copy of it. And in fact, if I went into hi.txt, I could see that it would be an exact duplicate of everything that existed in my hello.txt file. 

So that's how you copy a file. But what if you want to copy an entire directory? So for a second, let's take a look at what's in my pset0 directory. If I cd pset0 and list the contents, I have a directory called, sample, and a scratch file, scratch.sb2. So that's good to know. So let's clear the screen, and I'm going to go back to my workspace directory for a second. 

Let's say that, now, I want to make a copy of my pset0 directory. I can't just say cp pset0 pset3, for instance. You get this weird message, omitting directory pset0. Why do you get that message? Well, it turns out that, when you have a directory that has other stuff inside of it, the cp command doesn't really necessarily know what to do with it. 

We need to explicitly tell Linux, the terminal, I want you to copy the pset0 directory and copy every folder that exists inside of it and every file that exists inside of it. In other words, I need you to recursively dive down into pset0 and make a copy of everything in there. 

If I want to do that, what I can do is cp-r, for recursive, pset0 pset3. Hit Enter. Now, if I list the contents of my directory, I see there's the pset3 directory that I can work with. And if I cd into pset3 now and then list the contents, look, there's sample and scratch.sb2 again. So that's pretty cool. So that's how you can copy an entire directory, and not just a single file. So if you want to copy a directory, just remember to use the -r flag when you're working with the cp command.