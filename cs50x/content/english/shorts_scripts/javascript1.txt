So near CS50's end, we introduce you to several different programming languages, and we aren't able to cover them in nearly as much depth as we're able to cover C earlier in the course. The goal here is not to give you a complete rundown of what these languages do, but to give you enough of the basics and show you enough of the parallels to things that you already know so that you can go forth and really flesh out your knowledge of these different languages. And another one of these we're going to cover right now is JavaScript. Now, similar to other languages we've discussed, it is a modern programming language that is derived from C's syntax. So if you're familiar with C, you're going to be able to pick up JavaScript pretty quickly. It's been around just about as long as Python. It was invented a few years afterwards in the mid 1990s. Now what's really important about JavaScript, as well as HTML and CSS, which we've discussed in other videos, is that those three languages pretty much make up the core user experience of what it means to be online. So understanding how to use and work with JavaScript, HTML, and CSS will allow you to really create websites that users will enjoy visiting, because you'll be able to create a great user experience for them with these three languages. To write JavaScript, it's really easy. Open up a file with a dot js file extension, and start writing in JavaScript right away. If you're familiar with a language like PHP, you know that you have to sort of bind your code up in these delimiters-- bracket, question mark, PHP, and all that stuff. We don't have to do that in JavaScript. We literally just start writing our code in a JavaScript file, which is pretty nice. Our website will also know that what our file is is JavaScript, because we're going to tell it in an HTML tag. We're going to say, I have a script that is of type JavaScript, and it is a file with a dot js file extension. Pretty straightforward. Now, unlike Python, which runs on the server side-- that is, on the side that is hosting the website, JavaScript applications run client side on your own machine when you are visiting a website. To include JavaScript in your HTML, it's pretty easy. Just like when we include CSS with style tags, we can include JavaScript in between script tags. So we can have an open script tag and literally start writing JavaScript right in our HTML, which is kind of cool. But also like CSS, where we have link tags, we can write our JavaScript in a different file and connect it using the source attribute of a script tag. In CS50, and really probably more generally, this is definitely the preferred way to go, particularly if you have a JavaScript file that might be used-- or the contents of which might be used-- on different pages of your website. You don't have to write the JavaScript between the script tags on every single page. You want to be able to just refer to an outside file and link that in every single time. So let's quickly run down some of the fundamentals that you might use in JavaScript. So, variables-- they're really similar to Python variables and really similar to C variables. No type specifier is required. And if you want a local variable, you preface it with the var keyword. So in Python, we would say something like this-- x equals 44. We don't want to do that in JavaScript, because that would actually create a global variable, if you were to put a semicolon at the end. We would want this-- var x equals 44. That creates a local variable called x in JavaScript, and stores the value 44 in it. Conditionals-- all of the old favorites from C are available for you to use. If, else if, else, switch, question mark colon-- all of those are fair game. We're not going into detail on those at all, because we've covered them in our videos on C. But they're all here to use in JavaScript, and behave pretty much exactly the same. Loops, meanwhile-- all of ones we're familiar with from C are also still available-- while loops, do-while loops, and for loops, although we do have a couple of other variations that we'll talk about in just a little bit. Now, functions in JavaScript are all introduced with the function keyword. So it's a function. Write a function name and parameters, and then we define our function between curly braces just like we would in C, except in C, of course, we're not using the function keyword. But there's also a catch with JavaScript, which is that functions can be anonymous. Meaning you don't have to give them a name. Now, you might be asking yourself, wait, how can I call a function If it doesn't have a name? Well, we'll talk about that in just a little bit, and we'll talk about what I mean in particular here when I'm describing binding things to HTML elements. We'll talk about that in the video on the document object model, but we'll talk about anonymous functions in just another minute. I'll give you an example and you can see how they might be useful in certain contexts. And those contexts actually do kind of materialize a lot in JavaScript programming. JavaScript, like C, and like Python, are analogous to Python's lists. Has arrays, and you can declare an array. It's pretty straightforward. For example, var nums creates a local array. And then I have square brackets, and I just have a comma-separated list of all the values that I want to put in the array. I can also mix types. I don't have to have all integers, or all floats, or all strings, like I do in C. I can have different types mixed together there.