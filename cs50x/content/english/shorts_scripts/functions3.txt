We've declared a function, that's great. We've told the compiler what it is, what we're going to be doing. Now let's actually write that function. Let's give it a definition, so that inside the black box predictable behavior is happening. In fact, we are multiplying two real numbers together, or adding numbers together, or doing whatever it is that we asked our function to do. 

So in fact, let's try and define multiply two reals which we just talked about a second ago. Now the beginning of a function definition looks almost exactly the same as a function declaration. I have both of them here. At the top is the function declaration, type, name, comma separated argument list, semicolon. The semicolon indicates that that is a function declaration. The beginning of the function definition looks almost exactly the same, type, name, comma separated argument list, no semicolon, open curly brace. The open curly brace, just as we've been doing with main, means that we are now beginning to define what happens inside the black box that we've decided to call mult two reals. Here is one way to implement it. We could say, we could declare a new variable of type float called product and assign that variable to the value x times y. And then return product. What does return mean here. Well return is the way we indicate that's how we're passing the output back out. So return something, is the same as, this is the output of the black box. So that's how you do it. Here's another way to implement it. We could just return x times y. x is a float. y is a float. So x times y is also a float. We don't even need to create another variable. So that's a different way to implement the exact same black box. 

Now take a moment, pause the video again, and try and define add two ints, which is the other function that we talked about a moment ago. Again here, I've put the function declaration, and so the semicolon, and an open curly brace and a closed curly brace to indicate where we will fill in the contents of add two ints, so that we define the particular behavior inside the black box. So pause the video. And take as much time as you need to try and define an implementation of add two ints, such that when the function outputs a value, it does, in fact, return the sum of the two inputs. So just like the previous example, there are several different ways that you could implement add two ints. Here's one. In here in orange I've just had some comments-- I've just added some comments to indicate what's happening on each line of code. So I declare a variable called sum of type int. I say sum equals a plus b. That's where we're actually doing the work adding a and b together. And I return sum. And that makes sense because sum is a variable of type int. And what's the data type that this function tells me it's going to output? Int. So I'm returning sum, which is an integer variable. And that makes sense given what we've declared and defined our function to do. 

Now you can also define the function this way, int sum equals a plus b-- skip that first step-- and then, return sum. Now you could have also implemented it this way, which I highly do not recommend. This is bad style for one thing and really bad design, but it does, in fact, work. If you take this code, which is int add bad adder dot c, and use it. It actually does add two integers together. It's a very poor implementation of this particular behavior. But it does work. It's just here to illustrate the point that we don't really care what happens inside the black box, as long as it has the output that we expect. This is a poorly designed black box. But at the end the day, it does still output the sum of a plus b. All right.
