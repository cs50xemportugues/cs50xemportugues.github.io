JavaScript has the ability to behave a few different ways. That's why it can be a little bit tricky as the very first language to learn, because a sets up a bunch of rules for itself and then breaks them. It is very, very flexible, but perhaps almost a little too flexible as a first language. But it can behave as an object-oriented programming language. Object-oriented might be a term that you've heard before, but if not, we'll try to give a quick little crash course here. An object is really similar in spirit to a structure that we are familiar with, hopefully, from C. Now, in C, structures can have a number of different fields or members. Another term for those that we see commonly in object-oriented programming are properties. But those properties, or fields, or members, just like in C, can never stand on their own. So for example, if we define the structure for a car like this-- struct car, and inside of that, there are two different fields or members-- int year and char model tens, or a 10-character string that we can use to store the cars' model. We can do things like this. We can say struct car Herbie, which declares a variable of type struct car named Herbie, and then we can say Herbie dot year equals 1963. Hurbie dot model equals Beetle. That's totally fine. That's valid C. But we can never say this in C-- we can never say, year equals 1963, model equals Beetle. Now, we can't say that because year and model are so fundamental to what it means to be a struct car. They are part of a struct car. And so if we're ever using year and model-- we can't use them in the abstract. We always have to associate those things with a particular struct car. So that is not OK. Objects, in addition to having fields, or members, or properties, also have something called methods, which is sort of like if a C structure had a function that could only ever apply to that structure. So it's as if we have a function where structures are the only things that need to be passed in. Now, that, we have in C. But we can't define a function inside of the curly braces of a struct. That is more-- that is object-oriented programming. That is different from here. But just like properties, methods don't stand on their own either. It's not like a function that just exists in the abstract. It is a function that only exists in the context of, in this case, an object. So where we might do this in C-- function parentheses object, where object is a parameter to the function being called-- that is not object-oriented styling. Object oriented means the object is at the core of everything, and instead, we're going to call this function that is a part of the object. OK? So this is what object-oriented programming looks like in a very, very basic form, is, there are functions that are affiliated or associated with objects, and we call those functions as follows-- by specifying the object and saying we want some function to execute on that object, like this. The fields and methods of an object are really similar in spirit to the idea of a dictionary, which you may be familiar with or recall from Python. So we could, for example, have something like this-- var Herbie equals-- curly braces, now, not square brackets, it's curly braces-- and then, a comma-separated list of key value pairs, where year 1963 is sort of like saying Herbie dot year equals 1963 in C, and Herbie dot model equals Beetle. This is akin to how we would do the same thing in JavaScript, by creating an object and giving it a couple of properties right away.