All right. So now let's tackle a really big topic, functions. So far in the course, all the programs that we've been writing have been written inside of main. They're pretty simple programs. You don't need to have all these branches and things going on. We can just fit it all inside of main and it doesn't get terribly overwhelming. But as the course goes on and as you begin to develop programs independently, they're probably going to start to get a lot more than 10 or 15 lines. You might get hundreds or thousands or tens of thousands of lines of code. And it's really not that crazy a thought. As such, it's probably not a good idea to keep everything inside of main. It can get a little difficult to find what you're looking for if you do that. Fortunately, though C, and pretty much every other programming language that might work with, allows us to write functions. And I'm just going to take a quick aside here to mention that functions is one area of computer science. And you'll see many more of them at various points throughout the course and if you continue on. Where there's a lot of synonyms for the same word. So we call the functions. But you might also hear them referred to as procedures, or methods, particularly, if you've ever done any object oriented programming before-- and don't worry if you haven't, not a big deal-- but in audit oriented languages are frequently called methods. Sometimes they're called subroutines. But they really all refer to the same basic idea. 

Let's see what that idea is. What is a function? Well a function is really nothing more than a black box. A black box that has a set of zero or more inputs and a single output. So for example, this might be a function. This is a function called func. And it takes three inputs a, b, and c. And inside that black box, we don't know exactly what it does, but it processes the inputs in some way and then it gives a single output, in this case, z. Now to make it a little less abstract, we could say that maybe we have a function called add that takes three inputs a, b, and c and processes the output in some way inside the black box to produce a single output. So in this case, if add takes 3, 6, and 7. Somewhere inside the add function, we would expect them to be added together to produce the output, which is 3 plus 6 plus 7 or 16. 

Similarly, you have a function called mult that takes two inputs, a and b, processes them in some way such that the output of the function is the product of the two inputs. The two inputs multiplied together. 4 and 5 being passed into mult, something happens, the output we expect is 20. Why do we call it a black box? Well if we aren't writing the functions ourselves, which we've done quite a bit so far cs50. We've seen print f, for example, which is a function that we didn't write ourselves, but we do use all the time. If we aren't writing the functions ourselves, we don't really need to know how it's actually implemented under the hood. 

So for example the black box I just showed you for multiplication, mult a, b could be defined-- and this is just some pseudocode-- could be defined as output a times b. That make sense, right. If we have a function called mult that takes two inputs. We would expect that the output would be the two inputs multiplied together, a times b. But mult could also be implemented like this, we have a counter variable to get set inside of mult to 0. And then we repeat this process b times add a to counter. For example, if we multiply 3a by 5b, we could say set counter to 0, repeat five times, add 3 to counter. So we start at 0 and then we do this five times 3, 6, 9, 12, 15. It's the same result. We still get 3 times 5 just the implementation is different. 

That's what we mean when we say a black box. It just means we don't really care how it's implemented under the hood as long as the output is what we expect. In fact, that's part of the contract of using functions, particularly functions that others write. The behavior is always going to be typical, unpredictable based on the name of the function. And that's why it's really important when you write functions or when other people write functions that you might use, that those functions have clear, relatively obvious names, and are well documented. Which is certainly the case for function like print f. 

So why do we use functions? Well as I said earlier, if we write all of our code inside of main things can get really cumbersome and really complicated. Functions allow us the ability to organize things and break up a very complicated problem into a lot more manageable sub parts. Functions also allow us to simplify the coding process. It's a lot easier to debug a 10 line function versus a 100 line function or a 1,000 line function. If we only have to debug small pieces at a time, or write small pieces at the time, it makes that programming experience a lot better. Trust me on that one. 

Lastly, if we write functions we can reuse those various parts. Functions can be recycled. They can be used in one program or another. You've already written the function, all you need to do is tell that program where to find that function. We've been recycling and using print f for over 40 years. But it was only written one time. Pretty useful, right.
