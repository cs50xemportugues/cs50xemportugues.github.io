So we've declared functions. And we've defined function. So that's really good. Now let's start to use the functions that we've declared and we've defined. To call a function-- it's actually pretty easy-- all you need to do is pass it appropriate arguments, arguments of the data type that it expects, and then assign the return value of that function and this-- excuse me-- assign the return value of that function to something of the correct type. 

So let's have a look at this in practice in a file called adder 1 dot c, which I have in my cs50 IDE. So here is adder 1 dot c. At the beginning you see I have my includes, pound include, standard IO, and cs50 dot h. And then I have my function declaration. This is where I'm telling the compiler I'm going to be writing a function called add two ints. It's going to output an integer type variable. That's what this part is right here. And then I have two inputs to it a and b, each of which is an integer. Inside of main, I ask the user for input by saying, give me an integer. And they are prompted to forget int, which is a function that is included in the cs50 library. And that gets stored in x, an integer variable. 

Then we prompt them for another integer. We get another integer and store that in y. And then, here on line 28, is where we make our function call. We are saying, int z equals add 2 ints x comma y. Do you see why this makes sense? x is an integer type variable and y is an integer type variable. So that's good. That make sense with what our function declaration on line 17 looks like. The comma separated input list expects two integers, a and b. In that case, we can call them whatever we want. It just expects two integers. And x is an integer and y is an integer. That works. 

And we know that function is going to output an integers as well. And so we are storing the output of the function, add two ints, in an integer type variable, which we're calling z. And then we can say, the sum of percent i and percent i is percent i. x, y and z respectively filling in those percent i's. What is the definition of add two ints look like? It's pretty simple. It's one of the ones we just saw a second ago, int sum equals a plus b return sum. Does this work? Let's save the file. And then down here on my terminal I'm going to make adder 1, and I clear my screen. I'm going to zoom in because I know it's a little difficult to see. 

So we compile this program as adder 1. So we can do dot slash adder 1. Give me an integer, 10. Give me another integer, 20. The sum of 10 and 20 is 30. So we made a successful function call. You can run the function again, negative 10, 17 sum of negative 10 and 17 is 7. This function works. It has the behavior that we expect it to. And so we've made a successful function, definition, declaration, and a successful function call. Couple miscellaneous points about functions before we conclude this section. Recall from our discussion of data types, previously, that functions can sometimes take no inputs. If that's the case, we declare the function as having a void argument list. Do you recall what the most common function we've seen so far that takes a void argument list is? It's main. Recall also that function sometimes don't actually have an output. In that case, we declare the function as having a void return type. Let's conclude this section by tackling a practice problem. 

So here's the problem laid out. I want you to write a function called valid triangle. What this function should do is take three real numbers that represent the lengths of the three sides of a triangle as its parameters, or its arguments, or its inputs-- another set of synonyms that you might encounter. This function should either output true or false depending on whether those three lengths are capable of making a triangle. Do you remember the data type that we used to indicate true or false? Now how do you implement this? Well know there are a couple of rules regarding triangles that are actually useful to know. A triangle can only have sides with positive length. That makes sense. You're probably saying, duh. The other thing to note though, is that the sum of the lengths of any two sides of the triangle has to be greater than the length of the third side. That's actually true. You can't have a triangle of sides 1, 2 and 4, for example, because 1 plus 2 is not greater than 4. So those are the rules that determine whether or not the three inputs can conceivably form a triangle. So take a couple of minutes and declare and then define this function called valid triangle, such that it actually has the behavior specified here. 

It will output true if those three sides are capable of comprising a triangle, and false otherwise Ready to see how you did? Here's one implementation of valid triangle. It's not the only one. Yours might vary slightly. But this one does, in fact, have the behavior that we expect. We declare our function at the very top, bool valid triangle float x float y float z. So again, this function takes three real numbers as its arguments, floating point value variables, and outputs a true or false value, which is a Boolean, recall. So that's why the return type is bool. Then we define the function. First thing we do is check to make sure that all of the sides are positive. If x is less than or equal to 0, or if y is equal to 0, or if z is less than or equal to 0, that can't possibly be a triangle. They don't have positive sides. And so we can return false in that situation. Next, we check to make sure that every pair of inputs is greater than the third one. 

So if x plus y is less than or equal to z, or if x plus z is less than or equal to y, or if y plus z is less than or equal to x, that also can't be a valid triangle. So we return false again. Assuming we passed both of the checks though, then we can return true. Because those three sides are capable of returning-- of creating a valid triangle. And that's it. You've now declared and defined. And you may be able to now use and call this function. Great job. I'm Doug Lloyd. This is cs50. 