Here's an example of a hash function. I wrote this one up earlier. It's not a particularly good hash function for reasons that don't really bear going into right now. But do you see what's going on here? It seems like we're declaring a variable called sum and setting it equal to 0. And then apparently I'm doing something so long as strstr[j] is not equal to backslash 0. What am I doing there? 

This is basically just another way of implementing [? strl ?] and detecting when you've reached the end of the string. So I don't have to actually calculate the length of the string, I'm just using when I hit the backslash 0 character I know I've reached the end of the string. And then I'm going to keep iterating through that string, adding strstr[j] to sum, and then at the end of the day going to return sum mod HASH_MAX. 

Basically all this hash function is doing is adding up all of the ASCII values of my string, and then it's returning some hashcode modded by HASH_MAX. It's probably the size of my array, right? I don't want to be getting hash codes if my array is of size 10, I don't want to be getting out hash codes 11, 12, 13, I can't put things into those locations of the array, that would be illegal. I'd suffer a segmentation fault. 

Now here is another quick aside. Generally you're probably not going to want to write your own hash functions. It is actually a bit of an art, not a science. And there's a lot that goes into them. The internet, like I said, is full of really good hash functions, and you should use the internet to find hash functions because it's really just kind of an unnecessary waste of time to create your own. 

You can write simple ones for testing purposes. But when you actually are going to start hashing data and storing it into a hash table you're probably going to want to use some function that was generated for you, that exists on the internet. If you do just be sure to cite your sources. There's no reason to plagiarize anything here. 

The computer science community is definitely growing, and really values open source, and it's really important to cite your sources so that people can get attribution for the work that they're doing to the benefit of the community. So always be sure-- and not just for hash functions, but generally when you use code from an outside source, always cite your source. Give credit to the person who did some of the work so you don't have to. 

OK so let's revisit this hash table for a second. This is where we left off after we inserted John and Paul into this hash table. Do you see a problem here? You might see two. But in particular, do you see this possible problem? 

What if I hash Ringo, and it turns out that after processing that data through the hash function Ringo also generated the hashcode 6. I've already got data at hashcode-- array location 6. So it's probably going to be a bit of a problem for me now, right? 

We call this a collision. And the collision occurs when two pieces of data run through the same hash function yield the same hashcode. Presumably we still want to get both pieces of data into the hash table, otherwise we wouldn't be running Ringo arbitrarily through the hash function. We presumably want to get Ringo into that array. 

How do we do it though, if he and Paul both yield hashcode 6? We don't want to overwrite Paul, we want Paul to be there too. So we need to find a way to get elements into the hash table that still preserves our quick insertion and quick look up. And one way to deal with it is to do something called linear probing. 

Using this method if we have a collision, well, what do we do? Well we can't put him in array location 6, or whatever hashcode was generated, let's put him at hashcode plus 1. And if that's full let's put him in hashcode plus 2. The benefit of this being if he's not exactly where we think he is, and we have to start searching, maybe we don't have to go too far. Maybe we don't have to search all n elements of the hash table. Maybe we have to search a couple of them. 

And so we're still tending towards that average case being close to 1 vs close to n, so maybe that'll work. So let's see how this might work out in reality. And let's see if maybe we can detect the problem that might occur here. 

Let's say we hash Bart. So now we're going to run a new set of strings through the hash function, and we run Bart through the hash function, we get hashcode 6. We take a look, we see 6 is empty, so we can put Bart there. 

Now we hash Lisa and that also generates hashcode 6. Well now that we're using this linear probing method we start at 6, we see that 6 is full. We can't put Lisa in 6. So where do we go? Let's go to 7. 7's empty, so that works. So let's put Lisa there. 

Now we hash Homer and we get 7. OK well we know that 7's full now, so we can't put Homer there. So let's go to 8. Is 8 available? Yeah, and 8's close to 7, so if we have to start searching we're not going to have to go too far. And so let's put Homer at 8. 

Now we hash Maggie and returns 3, thank goodness we're able to just put Maggie there. We don't have to do any sort of probing for that. Now we hash Marge, and Marge also returns 6. 

Well 6 is full, 7 is full, 8 is full, 9, all right thank God, 9 is empty. I can put Marge at 9. Already we can see that we're starting to have this problem where now we're starting to stretch things kind of far away from their hash codes. And that theta of 1, that average case of being constant time, is starting to get a little more-- starting to tend a little more towards theta of n. We're starting to lose that advantage of hash tables. 

This problem that we just saw is something called clustering. And what's really bad about clustering is that once you now have two elements that are side by side it makes it even more likely, you have double the chance, that you're going to have another collision with that cluster, and the cluster will grow by one. And you'll keep growing and growing your likelihood of having a collision. And eventually it's just as bad as not sorting the data at all. 

The other problem though is we still, and so far up to this point, we've just been sort of understanding what a hash table is, we still only have room for 10 strings. If we want to continue to hash the citizens of Springfield, we can only get 10 of them in there. And if we try and add an 11th or 12th, we don't have a place to put them. We could just be spinning around in circles trying to find an empty spot, and we maybe get stuck in an infinite loop.