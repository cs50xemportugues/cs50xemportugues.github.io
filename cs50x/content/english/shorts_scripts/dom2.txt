
Let's go back to the slides and talk a little bit about how we might be able to do that. So again, the document object, as you could see from when we were just looking at it in the Console, is pretty big. There's a lot of stuff in there. We're not going to cover all of it, because not all of it's going to be really necessary as you get started working with it. But I want to cover a couple of the big properties that you might use when you're working with the document object, as well as a couple of the methods in just a moment.

So one of them, for example, is InnerHTML, which holds the HTML inside of a set of tags. So for example, the InnerHTML of the title tag, if I was to go into that section, would be "Hello, world" or whatever I called-- whatever my actual title of my page is. That's the InnerHTML of the title tag or the title node or the title object within the overall document object. nodeName similarly would just be title for the node we were just describing, or the section of the object we were just describing.

Id. You may recall from our video on HTML and CSS that we can specify an optional ID attribute to certain HTML elements. We usually use this in the context of CSS, for example, to style one particular node or one particular set of tags in our HTML with a certain style. We can give it an ID so that the CSS knows which section of the page to apply that style to. So this property would just allow us to figure out what the ID of that particular node is. parentNode is a reference to the node one level up.

So again, if I'm looking at the title node-- I'll just continue using that example for now-- the parent node of that would be head, because title is nested inside of head in that tree structure. childNodes is sort of the converse of that. It is what is down from where I currently am. So if I am now using the body node as an example, so we've kind of nested to that section of the tree, the child nodes of the body node would be that h2 and that p and that a. Those would be the three child nodes from that area. attributes, an array of attributes of an HTML element. A good example here is the image tag.

So if I am, again, navigating through the document object using JavaScript and I come to an image tag and I want to figure out what attributes it has, well, you may recall that an image's attributes include, for example, its source. What is the source file? Or perhaps I've also specified optional parameters of height and width. Those would all the attributes associated with that particular node of the document object. And then style, which is one way-- which is another way we can actually style the look and feel of a page. And in a few moments, we'll actually be going through an example, where we specifically manipulate this property, the style property, to change something. But it is analogous to the CSS styling of a particular section or portion of the page. So those are some of the most common properties. There are also four common methods that you might see. And again, there are many more beyond this. But here are four that you might use as you're beginning to work with the document object. getElementById. And notice that now because we're talking about methods, these are all functions that may optionally take parameters.

In this case, we're looking for an element with a specific ID. That's the parameter being passed in there. So if we maybe have styled a particular element using CSS and we've given it that optional ID attribute, this method would go and navigate through the entire document object for us and find that specific node, one of those further down the tree or further nested within the object. It would find that section of the page and return to you the M object from that point down. getElementsByTagName. Notice it's getElements. This would, for example, maybe find all of the instances of me using a B tag. So it would give me an array of all of the bold tagged sections of my site. appendChild basically allows me to add an additional node below where I currently am, so it allows me to expand the number of things. I might want to add a new element on the fly to the body portion of my website. I can append perhaps a new paragraph tag or an H3 or something else that wasn't there before using this method here. And then removeChild is sort of the opposite of that. It deletes a section of the page by removing that portion of the HTML, that entire node, from the document object.

I do want to point out one thing here that causes programmers a lot of heartache. I know it's caused me a lot of heartache. When you're using the getElementById attribute, notice that the D in Id is lowercase. Usually when we use the term ID for identification, it's usually capital I, capital D. I can't even tell you how many times I have accidentally typed capital I, capital D here. And then I get a JavaScript error, because it doesn't know what I'm talking about. So calling this out specifically as a well-known common issue, be really careful when using this to use a lowercase D there instead.

So because the document object is one big thing with lots of objects nested within it, if we start at the top, we can find our way using those properties and methods to any other area within the document object. 

