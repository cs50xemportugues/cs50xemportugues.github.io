So arrays are actually a special case of an object. And, actually, in JavaScript, everything is a special case of an object. X, any variable, var x equals 44-- that's an object that just happens to have one property. Arrays are an object that happens to have a number of properties, and also some certain methods that can be applied to them. So we can call the size method, or pop, or push, or shift. And I'll leave you to figure out, or to do some research into, what those different things are. But suffice it to say that they are functions that are basically so baked into what it means to be an array that we can just call them without having to write them in the first place. That's pretty cool. Here's another cool thing that you can do with arrays-- there's another method for them called map, which basically allows us to apply a function to every single element of an array. And in particular, this is a great example for using an anonymous function. So let's take a look at how we might use an anonymous function and why it might be useful to do so. Here's an array called nums. It has five elements in it-- 1, 2, 3, 4, and 5. Now, what I want to do is, I want to map some function on to them. So what I'm saying here is, nums equals-- so I'm going to do something to nums. I'm going to reassign that back to nums. Nums equals nums dot map-- and remember, map takes in a function. It's a function that I want to apply to all of the elements of that array. One thing I could do is just write this function somewhere else, and give it a name, say I called it-- what's going to happen here is, every value's going to be doubled. Let's say that I wrote a function called double numbers. I could say, nums equals nums dot map parentheses double numbers, and it would just double every number. That would be fine. But here, notice I'm using that function key word, and I'm giving a list of parameters-- in this case, num-- but I'm not giving that function a name. Why am I not giving that function a name? Well, I'm just doing this mapping here. I'm never going to need to double these numbers again. Why am I going to clutter up the name space, and give it some name when I'm never going to use it again outside of this context? It's kind of convenient that we can actually use the function in this case, then, without having to give it a name, and still have it do what we want to do. So all I'm doing here inside of those parentheses of maps is, the open parentheses on the first line there-- and that close parentheses is actually on the third line. And in between the parentheses, where I'm specifying the parameter to map, I'm literally defining an entire function in there. And then if I execute this line of code, what's going to happen to nums? Well, you can probably guess, it's going to just double every element of nums.