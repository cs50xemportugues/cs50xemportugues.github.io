Now, SQL is a programming language, like other programming languages that we've discussed. But it has a very limited vocabulary. Now, there are more things that you can do with SQL than we're going to talk about in this video because in this video we're just going to talk about the four operations that one can perform on a table, or the four main operations that you'll most likely perform on the table-- INSERT, SELECT, UPDATE, and DELETE. And these four things we'll get into a bit more detail in just a second about. But these are definitely the most common four things you'll be doing with the tables that you're building, certainly in CS50, but also probably more generally whenever you're working with databases. So for all of the examples that we're going to cover in this video, we're going to consider a database that contains these two tables called users and moms.

And you can see users has four different columns-- idnum, username, password, and fullname. And moms has two different columns, username and mother. And let's now start to work with these and see how we can manipulate this database and the tables within it to-- for whatever reason we need them to-- be updated in our website. So the first operation we'll cover is insert. And as you might expect, it adds information to a table. Now, SQL queries have a certain structure to them. And so with each of these operations, what I'm going to do is give you the general sort of skeleton of what a query might look like. And then we'll use a couple of examples of that query to see how it affects our table. So an insert query, in general, looks something like this-- INSERT INTO table. So we specify what table we want to insert into. And then we have parentheses, columns-- which is a comma-separated list of all of the columns of our table that we want to insert data into. Then we have VALUES, and then a comma-separated list of the values that we want to put into those columns in the same order. So for example, I might want to INSERT INTO users into these three columns-- username, password, name. The values, respectively-- newman, in lowercase, USMAIL-- that's going to be corresponding to the password-- and then capital-N Newman for fullname. So assuming that I execute this query on the users table shown here, what's going to happen? Well, this is what's going to happen. We're going to add this row because we inserted into the users table. But you might be asking yourself, wait a minute. You never specified ID number. So how exactly did ID number get there? I mean, you specified newman and USMAIL and Newman. But that 12, that was never part of our query. And you're right. Because when you define the column that ultimately ends up being your table's primary key, it's usually a good idea to have that column be an integer. It's not a requirement, but it's usually a good idea. And because having a primary key is so important, you might want to specify it to autoincrement.

And what this basically means is you can forget to include it as part of your query. And if you do, it will automatically insert a value there that is unique from every other value in that column, typically by just incrementing by one every time, so that that row is still guaranteed to be unique. Because if it wasn't set to autoincrement and we just forgot to omit it, there might be a couple of rows that are actually blank or null there. But if that's our primary key, if ID number is our primary key, and we have a couple of rows that are blank there, now they're not unique. We have two rows that are blank. We can't uniquely identify them. And so when you set up your primary key, you usually want it to be an integer, and you usually want it to autoincrement so that you can completely forget about having to worry about that and let the table do it for you. So that's how 12 got there. I had specified my idnum column do autoincrement every time I make an insert into the table. Let's do this another time. Let's insert into the other table, insert into the moms table, the following values into these following columns. We can INSERT INTO the username and mother columns of the users table the VALUES kramer and Babs Kramer. And just like what we saw before, this is what we would have as a result. We would just insert that row, and it would now be part of our database and part of our tables. So that's the insert operation. Now let's talk about the second operation, which is select. So if insert is used to put information into a table, select is used to get that information back out of the table so that we can do something with it. Select queries also have a very similar skeleton. And they look like this-- SELECT and then whatever columns you want to choose FROM whichever table you want to choose them from. And then optionally in red here, these two other things-- WHERE some condition is satisfied. And we usually, in the context of SQL, refer to a condition as a predicate. But basically, we're just checking to see that some situation is true. And we might want to, for example, order them by a specific column so that they are organized alphabetically by the values in some column or whatever else. We don't have to do either WHERE or ORDER BY. But generally WHERE in particular is going to be used so that you don't get your entire database back. And ORDER BY just helps to keep things a little more organized. So, for example, here's a select query that we could use-- SELECT idnum, fullname from the users table.

So let's see what's going to happen here. So remember, I'm selecting idnum and fullname from the users table. Well, what is the select query going to return to me? This information here. It's going to look at each row of the table, and it's going to just pull out the ID number and the full name and give me all of those down the entire users table. My user table only consists of three rows, so it's given me three pairs of information, three idnum-fullname combinations. Now let's say I want to restrict my search a little bit, my query a little bit. SELECT password FROM users WHERE idnum is less than 12. So now I'm adding a predicate or a condition to my select query. What's going to happen here? Well, I'm going to get this information. This is just the password column from the users table where the ID number in that row is less than 12. So only rows 10 and 11's password get given back to me. 12's does not because 12 is not less than 12. There's one other thing we can do with a select query, and that's to select *. SELECT * from moms where username equals jerry. * is just shorthand for every column. So instead of having to specify username, mother, the two columns here, or, if I was using the users table, having to specify idnum, username, password, fullname, I can just say SELECT *. Give me everything in that row. And if I SELECT * from moms where username equals jerry, I am given this set of information back.