Neste laboratório, sua tarefa será escrever um programa para simular um crescimento populacional. Vamos imaginar que temos uma população de animais, uma população de lhamas, por exemplo. Todos os anos, perdemos alguns animais dessa população à medida que as lhamas mais velhas morrem. Mas também ganhamos alguns animais nessa população à medida que novas lhamas nascem.

Podemos modelar este tipo de crescimento populacional usando uma fórmula matemática. Digamos, por exemplo, que todos os anos, se tivermos uma população de n lhamas, ganhamos n divididos por 3 lhamas e perdemos n dividido por 4 lhamas. Então, em uma população de 12 lhamas, por exemplo, no próximo ano, ganharíamos 12 dividido por 3, ou seja, quatro novas lhamas. E perderíamos em 12 dividido por 4, ou seja, três lhamas, nesse caso.

Dado esse cenário, podemos nos fazer uma pergunta. Por exemplo, poderíamos perguntar, quantos anos levaria para ir de 20 lhamas em uma população para 30 lhamas em uma população? Por exemplo, digamos que temos 20 lhamas nesta população. Logo, depois de um ano, ganharíamos 20 dividido por 3 lhamas.

Agora, observe aqui que 20 não divide uniformemente em três. E como resultado, precisamos truncar o que viria após a vírgula. A resposta real será de seis e alguma coisa. Mas como não podemos ter uma fração de um animal, simplesmente truncaremos o que vem após a vírgula e diremos que estamos ganhando seis lhamas.

E perderíamos 20 dividido por 4, que é igual a cinco lhamas. Então, depois de um ano, agora teríamos 21 lhamas. Podemos, então, repetir o processo e considerar o que pode acontecer no próximo ano.

No próximo ano, ganharíamos 21 dividido por 3, ou seja, sete lhama. E perderíamos 21 dividido por 4, truncando o que está após a vírgula, e portanto, perderíamos cinco lhamas. E portanto, temos uma mudança líquida de duas lhamas. O que significa que, depois de dois anos, agora temos 23 lhamas.

No próximo ano, ganharíamos sete lhamas, perderíamos cinco, para um novo total de 25 lhamas após três anos. No próximo ano, ganharíamos oito lhamas e perderíamos seis, para um novo total de 27 lhamas após quatro anos. E então, no quinto ano, ganharíamos nove lhamas e perderíamos seis para um total agora de 30 lhamas após cinco anos.

E então, a resposta para a pergunta, quantos anos seriam necessários para passar de uma população de 20 lhamas para uma população de 30 lhamas, é de cinco anos.

Agora, fizemos toda essa matemática manualmente. Mas sua tarefa é escrever um programa em C que possa fazer esse cálculo para nós.

O programa funcionará da seguinte forma. Na linha de comando, você executará um programa. E, nesse ponto, seu programa deve solicitar ao usuário um tamanho de população inicial. Você pode digitar um tamanho de população inicial de 100, por exemplo. Em seguida, seu programa deve solicitar ao usuário um tamanho de população final. E o usuário digitará outro tamanho, digamos 200, por exemplo.

Em seguida, seu programa deve descobrir quantos anos levaria para levar a população de lhamas do tamanho inicial para o tamanho final e, em seguida, imprimir esse número de anos. Então, neste caso, nosso programa imprimiria "anos: 9 (anos dois pontos nove)" porque levaria nove anos para levar a população de 100 para 200.

Resumindo, aqui está o que você precisa fazer. Primeiro, comece solicitando ao usuário o tamanho da população inicial de sua população de lhamas. E você deve verificar se a entrada do usuário é pelo menos nove. O tamanho da população precisa ser pelo menos nove para que possamos realmente começar a crescer essa população de lhamas.

Portanto, se o usuário digitar um número menor que nove, você deve continuar pedindo ao usuário que digite um número novamente até que ele lhe dê um número que seja pelo menos nove.

Em seguida, você deve solicitar ao usuário o tamanho da população final, aqui verificando se a entrada do usuário é pelo menos tão grande quanto o tamanho inicial. Não faria sentido, por exemplo, imaginar que a população passaria de uma população de 100 para uma população de 50 porque a população sempre crescerá. Portanto, você vai querer ter certeza de que o tamanho final da população é maior ou igual ao tamanho inicial da população. Se o usuário tentar digitar um tamanho de população final menor que o tamanho de população inicial, seu programa deve continuar pedindo ao usuário que digite outro tamanho de população final até que eles forneçam um que seja pelo menos o tamanho da população inicial.

Depois disso, seu programa deverá calcular quantos anos seriam necessários para levar a população do tamanho inicial para o tamanho final, lembrando que a cada ano vamos adicionar n divididos por 3 lhamas, se houver n lhamas no início. E vamos perder n divididos por 4 lhamas. E, como antes, como não podemos ter frações de uma lhama, se qualquer um desses cálculos resultar em algo após a vírgula, você vai truncar ou ignorar o que vem após a vírgula ao fazer sua matemática. Finalmente, depois de feito o cálculo, você vai imprimir o número de anos necessários. Imprimindo "anos:" e, em seguida, %i, onde %i é substituído por um número inteiro que você especifica após uma vírgula. E aqui estamos dizendo para imprimir o valor do número de anos como inteiro para mostrar ao usuário.

À medida que você começa a trabalhar neste problema, algumas estratégias podem ser úteis. Uma é a repetição do...while, um tipo de repetição que permite que você solicite algo ao usuário uma ou mais vezes. Então, na repetição que você está vendo aqui, começamos declarando uma variável chamada n. E então, dentro de uma estrutura de repetição, solicitamos ao usuário um número inteiro positivo, armazenando esse inteiro dentro de n.

Entretanto, vamos continuar repetindo esse comando enquanto n for menor que 1. O que significa que, se o usuário não digitar um número inteiro positivo, solicitaremos que ele digite novamente. Você não vai usar exatamente este código dentro do seu laboratório, mas pode usar algo semelhante, tanto ao solicitar o tamanho da população inicial, para garantir que o tamanho da população inicial seja pelo menos nove, quanto ao solicitar o tamanho da população final para garantir que o tamanho final da população seja pelo menos tão grande quanto o tamanho inicial da população.

Também pode ser útil atualizar uma variável à medida que você trabalha neste laboratório. Você pode querer atualizar repetidamente a variável do tamanho da população, por exemplo, para adicionar novas lhamas e se livrar de lhamas mais velhas. Você pode fazer isso usando uma fórmula como esta. Se você tiver uma variável chamada n, dentro da qual está sua população atual, você poderá atualizar o valor de n para o próximo ano usando uma linha que diz que n é igual a n mais n dividido por 3, o número de lhamas que estamos adicionando, menos n dividido por 4, o número de lhama que estamos perdendo naquele ano específico.

E, finalmente, depois que você concluiu o cálculo, pode imprimir uma variável usando a função printf, dizendo printf "anos: ", e, em seguida, %i, onde %i vai substituir um inteiro. Qual inteiro? Aquele que você especifica após uma vírgula. E aqui estamos dizendo para imprimir o valor de n como inteiro para mostrar ao usuário.

Agora, dê uma olhada no código de distribuição que lhe damos como ponto de partida para este problema. Aqui, em populacao.c, já incluímos cs50.h e stdio.h para você. E, em seguida, temos uma função main com algumas "tarefas" para começar.

Você vai primeiro solicitar o tamanho inicial, depois solicitar o tamanho final. Em seguida, você calculará quantos anos levará para atingir o tamanho final a partir do tamanho inicial. E, em seguida, finalmente, depois de fazer esse cálculo, você imprime o número de anos necessários para aumentar o tamanho populacional do tamanho inicial ao tamanho final.

Depois de escrever todas essas peças, você deve ser capaz de compilar seu programa e depois executá-lo, dando ao seu programa um tamanho de população inicial e um tamanho de população final. E, em seguida, o seu programa deve ser capaz de dizer quanto tempo levará para chegar do ponto A ao ponto B.

Meu nome é Ramon. E este foi o crescimento populacional.