Neste laboratório, sua tarefa será escrever uma aplicação web que acompanha os aniversários das pessoas. Sua aplicação web vai exibir uma tabela de aniversários com os nomes das pessoas em uma coluna e o mês e o dia do aniversário em outra coluna, além de ter um formulário onde os usuários podem adicionar um novo aniversário a um banco de dados digitando o nome de uma nova pessoa, o mês e o dia em que nasceram, e então usando essas informações para armazenar tudo dentro do banco de dados e atualizar o site com base nesse banco de dados, exibindo os nomes e aniversários de todas as pessoas que estão no banco de dados.

Para fazê-lo, a primeira coisa a entender é a estrutura do banco de dados que lhe é fornecida. E vamos lhe dar um banco de dados que possui uma tabela chamada aniversários. Essa tabela tem um ID. Cada aniversário também tem o nome da pessoa cujo aniversário estamos armazenando, bem como um número inteiro para o mês e o dia de nascimento daquela pessoa.

Vamos dar uma olhada agora no código de distribuição que fornecemos como parte desta aplicação. Esta é uma aplicação de flask. Então, primeiro vamos dar uma olhada em application.py. O que você notará é que dentro de application.py, estamos nos dando acesso a esse banco de dados usando a biblioteca CS50 para obter acesso a birthdays.db, que representa o banco de dados dentro dessa variável chamada DB.

Em seguida, temos uma única rota nesta aplicação web, apenas a rota de barra que é a padrão, que aceita dois métodos de solicitação, GET e POST. GET será o método de solicitação que usaremos quando alguém simplesmente visitar nossa página digitando sua URL ou clicando em um link. E POST será o método de solicitação que usamos quando o usuário está enviando algum dado de formulário, como a adição de um aniversário de uma pessoa ao banco de dados.

Se o método de solicitação for POST, já escrevemos esta parte para você, bem, isso significa que o usuário enviou algo através de um formulário. E então, o que você vai querer fazer é adicionar a entrada do usuário com seu nome e aniversário ao banco de dados. E então o usuário será redirecionado de volta para a rota padrão. Mas, caso contrário, se o usuário estiver apenas obtendo o site, sem enviar um novo aniversário, então iremos exibir index.html. Em última análise, index.html também precisa ter acesso a informações sobre todos os aniversários das pessoas dentro do banco de dados. Então, você vai querer adicionar lógica aqui para consultar o banco de dados para obter acesso a todos esses aniversários e passá-los para index.html.

Vamos agora dar uma olhada em index.html que está dentro da nossa pasta de Modelos. Você notará que aqui temos uma seção que diz "adicionar um aniversário" e nada abaixo disso ainda. Este formulário será criado por você. E então temos uma tabela para exibir aniversários, onde cada linha nessa tabela terá uma célula para o nome da pessoa e uma célula para o aniversário dela, mês e dia. Mas você notará que o corpo desta tabela está vazio agora. Sua tarefa, em última análise, será dentro de index.html percorrer todos os aniversários aos quais você tem acesso do banco de dados e imprimir uma linha neste modelo HTML para cada um desses aniversários, imprimindo uma linha que tem um nome para a pessoa, bem como seu aniversário.

Então vamos recapitular o que você vai fazer como parte deste laboratório. A primeira coisa que você deve fazer em application.py é consultar todos os aniversários e passar esses dados para index.html. Isso é na seção else daquela rota para uma solicitação GET padrão. Porque quando alguém está obtendo sua página, você deve consultar todos os aniversários do banco de dados e, em seguida, fornecer essas informações para o index.html para que seu modelo HTML possa tirar proveito desses dados para renderizar todas essas linhas de tabela.

O próximo passo em index.html é renderizar essas linhas de tabela. Para cada um dos aniversários que você obteve da consulta, você vai renderizar cada um como uma linha nessa tabela com uma célula naquela tabela para o nome e uma célula naquela tabela para o aniversário. Lembre-se de que você pode criar uma linha de tabela em HTML usando a tag TR. E você pode criar uma célula nessa linha usando TD, TD significando dados da tabela.

E você provavelmente vai querer usar algum tipo de loop aqui também para poder percorrer sua lista de todos esses aniversários e, para cada um desses aniversários, renderizar uma linha que aparece dentro de sua tabela HTML.

Depois de implementar essa parte da aplicação, você deve ser capaz de visualizar os aniversários que já estão no banco de dados. Mas agora queremos a capacidade de adicionar novos aniversários a esse banco de dados também. Então, em index.html, você adicionará um formulário para permitir que os usuários adicionem um novo aniversário. Esse formulário deve dar aos usuários a capacidade de especificar o nome de uma pessoa, em que mês nasceram e em que dia nasceram e, em seguida, clicar em algum botão que permite que eles enviem esse formulário para adicionar um novo aniversário ao banco de dados.

E finalmente, em application.py, você precisará adicionar lógica para lidar com essas submissões de formulário, acessando qualquer dado que foi enviado através desse formulário e inserindo esse novo aniversário no banco de dados. Depois de fazer isso, os usuários devem ser capazes de visitar sua aplicação web, preencher esse formulário digitando seu nome, um mês e um dia e ter seu aniversário adicionado ao seu banco de dados. E como resultado, seu nome e aniversário devem aparecer dentro da sua tabela HTML também.

Como você pode fazer isso? Bem, para executar consultas SQL em seu banco de dados, você pode usar db.execute. Lembre-se de que DB é o nome que representa esse banco de dados que temos dentro de nossa aplicação flask. E execute permitirá que você execute uma consulta como um select ou um insert nesse banco de dados do seu programa Python. E lembre-se também que se você adicionar pontos de interrogação nessa consulta, poderá usá-los como espaços reservados para outros valores, de modo que possa substituir valores que vieram do usuário, como via envio de formulário, por exemplo, como parte da consulta que você está executando.

Enquanto você faz isso, você também vai querer ter em mente a distinção entre esses dois diferentes métodos de solicitação, GET e POST. Quando o usuário está obtendo a página, tudo o que você vai fazer é consultar todos os aniversários e exibir essa página HTML que tem essa tabela de todos os aniversários. O POST, enquanto isso, é o que vai acontecer quando o usuário enviar um formulário. Então, você vai querer se certificar de que seu formulário tem um método POST para garantir que, quando você estiver enviando dados, está enviando esses dados via POST. E então, certifique-se de que sua rota possa lidar com essas solicitações POST, adicionando cada um desses aniversários ao banco de dados, de modo que na próxima vez que o usuário visitar essa página, seu aniversário também estará naquela página.

Meu nome é Brian, e isso foi aniversários.