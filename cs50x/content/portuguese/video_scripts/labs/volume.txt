Neste laboratório, sua tarefa será escrever um programa em C que altere o volume de um arquivo de áudio. Especificamente, neste laboratório, vamos trabalhar com arquivos WAV, um formato de arquivo padrão para representar informações de áudio.

Qual é a estrutura de um arquivo WAV? Bem, como qualquer arquivo, esses arquivos consistem em bytes. E, em particular, em um arquivo WAV, os primeiros 44 bytes desse arquivo são o cabeçalho desse arquivo WAV que contém informações sobre esse arquivo que seu computador, ou programas em seu computador, podem precisar saber para ler e entender e interpretar esse arquivo. Após o cabeçalho de 44 bytes, há duas amostras de áudio de dois bytes. Muitas, muitas dessas amostras de áudio de 2 bytes são repetidas, uma após a outra, em que cada uma dessas amostras de 2 bytes representa o valor de alguma forma de onda de áudio em um determinado momento.

Portanto, seu arquivo WAV consistirá, em última análise, em um cabeçalho de 44 bytes, seguido por muitas dessas amostras de 2 bytes. E a coisa interessante sobre essas amostras de 2 bytes é que cada uma é apenas um número. E se você quiser alterar o volume de uma amostra, você vai multiplicar essa amostra por um número.

Se eu tiver uma amostra de áudio e quiser duplicar o volume, por exemplo, eu pegaria cada uma das amostras de áudio no arquivo de áudio que estou tentando modificar e apenas multiplicaria cada um desses valores da amostra por 2. Da mesma forma, se estou tentando cortar o volume pela metade para um arquivo de áudio específico, então tomarei cada uma das amostras de 2 bytes e multiplicarei cada uma por 0,5 ou 1/2, para cortar o volume pela metade também.

Em última análise, a maneira como seu programa funcionará é que vamos executar nosso programa como ./volume seguido de três argumentos de linha de comando. O primeiro argumento de linha de comando é um arquivo WAV de entrada, algum arquivo que já existe que representa o arquivo de áudio que estamos aqui tentando modificar. O próximo argumento de linha de comando é o nome de algum arquivo de saída, algum novo arquivo de áudio que nosso programa irá gerar e que terá o volume modificado.

E finalmente, o último argumento de linha de comando para este programa será um número de ponto flutuante representando o fator pelo qual alterar o volume do arquivo de áudio original. Neste caso, por exemplo, estamos usando um fator de 2.0 para significar que queremos duplicar o volume do arquivo de áudio. Mas se tivéssemos tentado usar 0,5, por exemplo, como fator, então estaríamos cortando o volume do arquivo de áudio pela metade.

Então, aqui está o que você precisa fazer neste laboratório. Para pegar o arquivo de entrada e gerar um novo arquivo de saída que é o mesmo áudio, mas apenas com o volume alterado, você vai querer começar com o cabeçalho desse arquivo WAV, já que o cabeçalho, os primeiros 44 bytes do arquivo, são a primeira coisa que você encontrará dentro do arquivo WAV de entrada. Então, inicialmente, você vai querer ler o cabeçalho do arquivo de entrada. E então você vai querer escrever o mesmo cabeçalho para o arquivo de saída. Depois do cabeçalho, lembre-se, vêm cada uma dessas amostras de 2 bytes, muitas amostras de 2 bytes, lado a lado no arquivo, representando a forma de onda de áudio do próprio arquivo.

Portanto, você vai querer repetir, para cada uma dessas amostras de 2 bytes, você vai querer primeiro ler a amostra do arquivo de entrada, provavelmente em alguma variável. E então, você vai querer multiplicar esse valor da amostra pelo fator de volume. Se você está tentando duplicar o volume da amostra, então duplicará esse volume. Se você está tentando triplicá-lo, você vai multiplicá-lo por 3. Se você está tentando cortar o volume pela metade, você vai multiplicar por 0,5, por exemplo.

E depois de fazer essa multiplicação, você vai gravar essa nova amostra no arquivo de saída. Então, a amostra atualizada, com o volume modificado, acabará sendo gravada no arquivo de saída para cada uma das amostras de áudio em todo o arquivo.

Conforme você trabalha neste laboratório, algumas técnicas serão úteis. Uma delas é aproveitar os vários tipos diferentes que o C lhe oferece para lidar com dados de diferentes tamanhos. uint8_t, por exemplo, é um tipo que armazena inteiros sem sinal de 8 bits, ou 1 byte de tamanho. E isso é útil sempre que você deseja representar apenas um byte genérico de dados. Por exemplo, se você está tentando ler um cabeçalho que tem 44 bytes de dados, pode usar uma matriz de 44 desses inteiros sem sinal de 8 bits como uint8_ts, dentro de uma matriz, para armazenar seu cabeçalho.

Enquanto isso, int16_t é um tipo que armazena inteiros com sinal, o que significa que podem ser positivos, 0 ou negativos, de 16 bits, ou 2 bytes, cada. E, em última análise, esta é uma ótima escolha de tipo para representar suas amostras. Porque sabemos que cada amostra tem 2 bytes de tamanho. E int16_t é o tamanho perfeito para representar esse tipo de informação.

Em seguida, você também vai querer lidar com a leitura e gravação de arquivos. E para isso, essas duas funções provavelmente serão úteis, fread e fwrite. fread lerá um certo número de bytes de algum arquivo para a memória dentro do seu computador. E da mesma forma, fwrite pode gravar dados da memória do seu computador em um arquivo específico. E você provavelmente vai querer olhar para a documentação de cada uma dessas funções, fread e fwrite, para entender quais argumentos eles recebem em que ordem e como você pode usar essas funções para ler do arquivo de entrada e, em seguida, gravar seus dados atualizados em seu arquivo de saída.

Agora vamos dar uma olhada no código de distribuição que fornecemos a você como parte deste laboratório. Você notará que uma das primeiras coisas que lhe fornecemos é uma constante inteira chamada HEADER_SIZE, igual a 44. Você pode usar essa variável sempre que precisar se referir ao número de bytes dentro do cabeçalho de um arquivo WAV como essa constante inteira chamada HEADER_SIZE.

Dentro da função principal, já fizemos algum trabalho para você. Primeiro, verificando o número de argumentos da linha de comando para garantir que, ao executar este programa, o usuário esteja fornecendo um arquivo de entrada, um arquivo de saída, bem como algum fator pelo qual alterar o volume do arquivo de entrada. Em seguida, abrimos o arquivo de entrada, verificando se o arquivo de entrada pôde ser aberto corretamente. Em seguida, abrimos o arquivo de saída usando o modo W, W para gravação desse arquivo, para garantir que possamos abrir o arquivo em que iremos gravar corretamente. E, em seguida, calculamos o fator, convertendo esse fator em um número de ponto flutuante como 2.0 para duplicar o volume ou 0.5 para cair o volume pela metade.

Aqui estão seus objetivos. A primeira coisa que você vai querer fazer é copiar o cabeçalho do arquivo de entrada para o arquivo de saída. Lembre-se de que você sabe que o cabeçalho sempre terá 44 bytes. Então, você provavelmente vai querer usar fread para ler 44 bytes do arquivo e, em seguida, fwrite para gravar 44 novos bytes no arquivo de saída.

Em seguida, você vai querer percorrer cada uma das amostras, provavelmente usando algum tipo de loop para percorrer o arquivo de entrada até o final do arquivo. E para cada uma dessas amostras de 2 bytes, para lê-la na memória, atualizar o volume e, em seguida, gravar essa amostra atualizada no arquivo de saída também.

Você notará que fornecemos a você um arquivo de entrada de amostra, input.wav, que você pode ouvir como apenas uma amostra de áudio. E você pode executar seu programa de volume neste arquivo, passando um fator de 2.0 para duplicar o volume ou outro fator para alterar o volume em uma quantidade diferente. E então você deve ser capaz de ouvir esse novo arquivo de saída e detectar que ele tem o mesmo áudio, apenas com um volume diferente.

Depois de executar todas essas etapas, você deve ter um programa que pode pegar qualquer arquivo WAV e alterar o volume em um fator específico.

Meu nome é Brian. E isto foi Volume.