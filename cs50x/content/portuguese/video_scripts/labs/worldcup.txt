Neste laboratório, a sua tarefa será escrever um programa em Python para simular os resultados de um torneio esportivo. Em um torneio esportivo, como a Copa do Mundo da FIFA ou outros torneios esportivos similares, muitas vezes o torneio acaba em um chaveamento de eliminação simples, onde você acaba com um monte de equipes, cada uma jogando contra as outras. Os vencedores seguem para a próxima rodada, jogam entre si, os vencedores seguem para a próxima rodada, jogam entre si e finalmente as duas últimas equipes jogam entre si. A equipe que vencer é declarada a vencedora do torneio.

Como podemos simular este tipo de torneio? Bem, para fazê-lo, precisamos de uma ideia de quão bom cada uma dessas equipes são, para que possamos comparar duas equipes e fazer alguma previsão sobre quem é provavelmente o vencedor em um jogo entre essas duas equipes. Muitas vezes, as equipes ou jogadores terão classificações, algum número que determina o quão boa é aquela equipe ou jogador e, como resultado, podemos usar essa informação para comparar duas classificações para determinar quem pode vencer um jogo entre quaisquer duas equipes.

O seu programa usará essa informação, uma lista de equipes e suas classificações, para simular um torneio e simular qual é a probabilidade de que uma determinada equipe vença o torneio. Para fazer isso, você precisará de acesso a alguns dados, então vamos fornecer um arquivo de dados formatado como um arquivo CSV (valores separados por vírgula), onde cada linha corresponde a uma equipe com duas classificações. Primeiro, colocamos o nome da equipe, ou seja, de qual país, por exemplo, essa equipe é, seguido de uma vírgula e depois a classificação para aquela equipe. Esta é uma informação numérica que representa a força daquela equipe, onde uma classificação maior significa que a equipe é melhor e, portanto, tem mais chances de vencer um jogo contra uma equipe com classificação menor, por exemplo. Quanto maior a diferença entre as classificações dessas duas equipes, mais provável é que a equipe com a classificação mais alta vença esse jogo.

Se armazenarmos essas informações dentro de um arquivo CSV, então o seu programa funcionará da seguinte forma: você executará o arquivo python tournament.py seguido do arquivo CSV, o que temos aqui é de 2018, contendo as equipes que participaram da Copa do Mundo masculina da FIFA, e depois o seu programa simulará um monte de torneios, talvez simule 1.000 torneios diferentes dentro dessas equipes e depois imprimirá com base nesses resultados qual é a probabilidade de que qualquer país específico seja o vencedor final do torneio.

Como você fará isso? Bem, vamos começar dando uma olhada no código distribuído que fornecemos a você como parte deste laboratório. Para este laboratório, fornecemos alguns arquivos CSV, cada um dos quais contém uma lista de equipes, bem como a classificação de cada uma dessas equipes, e fornecemos isso para alguns torneios diferentes; "tournament.py" é onde toda a lógica está. Este é o arquivo Python que você usará para realmente simular um desses torneios esportivos.

Começamos aqui, definindo uma variável "n", que é igual ao número de simulações a serem executadas e, por padrão, vamos simular 1.000 torneios diferentes com essas equipes. Dentro da função principal, verificamos se o programa está sendo usado corretamente com um nome de arquivo fornecido como argumento. Em seguida, definimos uma variável chamada "teams", que inicialmente será apenas uma lista vazia, não há equipes que conhecemos ainda. Mas a primeira coisa que você vai querer fazer é ler do arquivo CSV todas essas equipes e classificar cada equipe dentro dessa lista de equipes, armazenando cada equipe em um dicionário onde aquele dicionário irá armazenar os valores tanto para o nome da equipe quanto para a classificação para aquela equipe.

Depois disso, definimos outro dicionário chamado "count". "Count" será um dicionário que mapeia chaves para valores como todos os dicionários fazem, onde, neste caso, as chaves serão os nomes das equipes e os valores serão quantos torneios essa equipe venceu. Porque, em última análise, simularemos n torneios, onde por padrão n será 1.000 e queremos acompanhar quantas vezes uma determinada equipe vence um torneio; se uma equipe vence o torneio 100 vezes, então o nome dessa equipe será a chave e 100 será o valor, para que possamos lembrar para cada equipe quantos torneios elas venceram de acordo com a nossa simulação. E com base nessa simulação, já escrevemos o código para você, que passará por cada uma dessas equipes e imprimirá qual a probabilidade que esperamos ter de ganhar todo o torneio.

Também disponibilizamos a você algumas outras funções. Disponibilizamos uma função "simulate_game" que aceita duas equipes como entrada. E o que ele fará é retornar verdadeiro se com base na simulação, a equipe 1 ganhar e falso caso contrário. Essa função utiliza alguma aleatoriedade, nem sempre retornará o mesmo resultado toda vez, assim como quando duas equipes iguais jogam, não é provável que a mesma equipe vença sempre. Existe alguma variabilidade na função também.

O que a função faz é olhar para a classificação de ambas as equipes, "rating 1" e "rating 2", e usa essa informação para calcular qual é a probabilidade de, por exemplo a equipe 1 vencer o jogo. E então, aleatoriamente, usando essa probabilidade, retorna verdadeiro se a equipe 1 vencer e falso caso contrário.

Também disponibilizamos para você uma função chamada "simulate_round", que faz a mesma coisa, mas não apenas para um jogo, mas para uma rodada inteira de jogos entre muitas equipes diferentes. A função "simulate_round" aceita como entrada uma lista de equipes, e o que ela fará é considerar cada um desses pares de equipes uma de cada vez, equipes 0 e 1, depois 2 e 3, depois 4 e 5, e simular o jogo entre cada um deles, retornando uma lista com os vencedores daquela rodada. Então, se você der a "simulate_round" uma lista de oito equipes, por exemplo, ela retornará uma lista com os quatro vencedores que surgiram emparelhando as equipes 0 e 1, 2 e 3, 4 e 5, 6 e 7, por exemplo.

Finalmente, temos aqui a função "simulate_tournament". Esta função deve simular todo o torneio, começando com todas as equipes, que você pode supor ser uma potência de dois, como 16 equipes, por exemplo. E, repetidamente, simular rodadas até que reste apenas um vencedor de todo o torneio. Cabe a você completar essa função.

Para fazer isso, você provavelmente vai querer chamar a função "simulate_round", que já escrevemos para você, que aceita uma lista de equipes e retorna uma lista com os vencedores dessa rodada. E, provavelmente, você vai querer executar esta função várias vezes, simulando repetidamente rodadas até que reste apenas uma equipe. Se você começar com um torneio com 16 equipes e passá-las para "simulate_round", receberá uma lista com oito vencedores. Se simular uma rodada com esses oito vencedores, receberá uma lista com quatro vencedores e assim por diante, até que reste apenas uma equipe vencedora neste torneio. E, uma vez que reste apenas uma equipe vencedora, você retornará o nome dessa equipe para que possa usá-lo dentro do seu dicionário "count" para descobrir quem, em última instância, vai vencer a simulação.

Depois de fazer tudo isso, você deve ser capaz de executar "tournament.py" em um arquivo CSV que contém equipes e suas classificações e descobrir a probabilidade aproximada de que qualquer equipe específica vença o torneio.

Meu nome é Brian e este era o World Cup.