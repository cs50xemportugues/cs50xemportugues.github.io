Certo. Se você acabou de assistir aquele vídeo sobre listas encadeadas simples, desculpe por deixá-lo numa expectativa. Mas fico feliz que esteja aqui para terminar a história das listas encadeadas duplas.

Então, se você se lembra daquele vídeo, falamos sobre como as listas encadeadas simples limitam a nossa capacidade de lidar com informações onde o número de elementos ou itens em uma lista pode crescer ou encolher. Agora podemos lidar com algo assim, onde não poderíamos lidar com isso com arrays.

Mas elas sofrem de uma limitação crítica, que é que com uma lista encadeada simples, só podemos nos mover em uma única direção pela lista. E a única situação real em que isso pode se tornar um problema é quando estamos tentando excluir um único elemento. E nem mesmo discutimos como fazer isso em uma lista encadeada simples em pseudo-código. Certamente é possível, mas pode ser um pouco complicado. Então, se você se encontrar em uma situação em que está tentando excluir elementos únicos da lista ou for necessário que você exclua elementos únicos da lista, convém considerar o uso de uma lista encadeada dupla em vez de uma lista encadeada simples. Porque as listas encadeadas duplas permitem que você se mova para a frente e para trás pela lista em vez de avançar apenas pela lista - adicionando apenas um elemento extra à nossa definição de estrutura para o nó da lista encadeada dupla.

Novamente, se você não estiver excluindo elementos únicos da lista - porque estamos adicionando um campo extra à nossa definição de estrutura, os próprios nós das listas encadeadas duplas serão maiores. Eles ocuparão mais bytes de memória. E, portanto, se isso não for algo que você precisará fazer, você pode decidir que não vale a pena a troca de precisar gastar os bytes extras de memória necessários para uma lista encadeada dupla se você não estiver excluindo elementos únicos. Mas elas também são legais para outras coisas também.

Então, como eu disse, só precisamos adicionar um único campo à nossa definição de estrutura - essa noção de um ponteiro Anterior. Então, com uma lista encadeada simples, temos o valor e o ponteiro Próximo, então a lista encadeada dupla tem apenas uma maneira de voltar também.

Agora, no vídeo de lista encadeada simples, falamos sobre essas são cinco das coisas principais que você precisa ser capaz de fazer para trabalhar com listas encadeadas. E, para a maioria dessas coisas, o fato de ser uma lista encadeada dupla não é realmente um grande salto. Ainda podemos pesquisar apenas movendo-se para frente do início ao fim. Podemos criar um nó do nada da mesma maneira. Podemos excluir listas da mesma maneira também. As únicas coisas que são sutilmente diferentes são inserir novos nós na lista, e finalmente falaremos sobre a exclusão de um único elemento da lista também. Novamente, praticamente os outros três, não vamos falar sobre eles agora porque são pequenos ajustes nas ideias discutidas no vídeo de lista encadeada simples.

Então, vamos inserir um novo nó em uma lista encadeada dupla. Falamos sobre como fazer isso para listas encadeadas simples também, mas há um par de coisas extras em listas encadeadas duplas. Estamos passando a cabeça da lista aqui e algum valor arbitrário, e queremos obter a nova cabeça da lista desta função. É por isso que ela retorna um "dllnode star". Então, quais são as etapas? Eles são, novamente, muito semelhantes às listas encadeadas simples com uma adição extra. Queremos alocar espaço para um novo nó e verificar se ele é válido. Queremos preencher aquele nó com qualquer informação que queiramos colocar nele. A última coisa que precisamos fazer - a coisa extra que precisamos fazer, em vez disso - é consertar o ponteiro Anterior da antiga cabeça da lista. Lembre-se de que, devido às listas encadeadas duplas, podemos nos mover para frente e para trás - o que significa que cada nó na verdade aponta para dois outros nós em vez de apenas um. E então precisamos consertar a antiga cabeça da lista para apontar para trás para a nova cabeça da lista encadeada, o que era algo que não precisávamos fazer antes. E como antes, apenas retornamos um ponteiro para a nova cabeça da lista.

Então, aqui está uma lista. Queremos inserir o 12 nesta lista. Observe que o diagrama é um pouco diferente. Cada nó contém três campos - dados, um ponteiro Próximo em vermelho e um ponteiro Anterior em azul. Nada vem antes do nó 15, então o seu ponteiro Anterior é nulo. É o começo da lista. Não há nada antes dele. E nada vem depois do nó 10, e seu ponteiro Próximo também é nulo.

Então, vamos adicionar o 12 a esta lista. Precisamos alocar espaço para o nó. Colocamos o 12 nele. E então, novamente, precisamos ter muito cuidado para não quebrar a cadeia. Queremos arrumar os ponteiros na ordem correta. E às vezes isso pode significar - como veremos especialmente com exclusão - que temos alguns ponteiros redundantes, mas tudo bem.

Então, o que devemos fazer primeiro? Eu recomendaria as coisas que você deve fazer são preencher os ponteiros do nó 12 antes de tocar em qualquer outra coisa. Então, o que o 12 vai apontar em seguida? 15. O que vem antes do 12? Nada. Agora preenchemos as informações adicionais em 12, então ele tem Anterior, Próximo e valor.

Agora podemos fazer o passo extra que estávamos falando - podemos fazer 15 apontar de volta para 12. E agora podemos mover a cabeça da lista encadeada para ser apenas 12. Por isso, é bastante semelhante ao que estávamos fazendo com listas encadeadas simples, exceto pelo passo extra de conectar a antiga cabeça da lista à nova cabeça da lista encadeada.

Agora vamos finalmente excluir um nó de uma lista encadeada. Então, digamos que temos alguma outra função que está encontrando um nó que queremos excluir e nos deu um ponteiro exato para o nó que queremos excluir. Nem precisamos dizer que a cabeça ainda está declarada globalmente. Tudo o que essa função está fazendo é que encontramos um ponteiro exato para o nó que queremos eliminar. Vamos eliminá-lo. É muito mais fácil com listas encadeadas duplas. Primeiro - são realmente apenas algumas coisas. Só precisamos consertar os ponteiros dos nós circundantes para que saltem sobre o nó que queremos excluir. E então podemos excluir esse nó. Então, novamente, estamos apenas passando por aqui. Apparentemente, decidimos que queremos excluir o nó X. E novamente, o que estou fazendo aqui - a propósito - é um caso geral para um nó que está no meio